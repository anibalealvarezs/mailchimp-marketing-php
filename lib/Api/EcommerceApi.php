<?php

/**
 * EcommerceApi
 * PHP version 5
 *
 * @category Class
 * @package  MailchimpMarketing
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Mailchimp Marketing API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.74
 * Contact: apihelp@mailchimp.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.12
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace MailchimpMarketing\Api;

use GuzzleHttp\Psr7\Query;
use GuzzleHttp\Psr7\Request;
use InvalidArgumentException;
use MailchimpMarketing\ApiException;
use MailchimpMarketing\ApiTrait;
use MailchimpMarketing\ObjectSerializer;
use stdClass;

class EcommerceApi
{
    use ApiTrait;

    public function deleteStore($store_id)
    {
        return $this->deleteStoreWithHttpInfo($store_id);
    }

    public function deleteStoreWithHttpInfo($store_id)
    {
        $request = $this->deleteStoreRequest($store_id);

        try {
            $options = $this->createHttpClientOption();
            $response = $this->client->send($request, $options);

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return json_decode($response->getBody()->getContents());

        } catch (ApiException | GuzzleException $e) {
            throw $e->getResponseBody();
        }
    }

    protected function deleteStoreRequest($store_id): Request
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $store_id when calling '
            );
        }

        $resourcePath = '/ecommerce/stores/{store_id}';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'store_id' . '}',
                ObjectSerializer::toPathValue($store_id),
                $resourcePath
            );
        }

        // body params
        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json'],
            ['application/json']
        );


        // Basic Authentication
        if (!empty($this->config->getUsername()) && !empty($this->config->getPassword())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        // OAuth Authentication
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?$query" : ''),
            $headers,
            $httpBody
        );
    }

    public function deleteStoreCart($store_id, $cart_id)
    {
        $this->deleteStoreCartWithHttpInfo($store_id, $cart_id);
    }

    public function deleteStoreCartWithHttpInfo($store_id, $cart_id)
    {
        $request = $this->deleteStoreCartRequest($store_id, $cart_id);

        try {
            $options = $this->createHttpClientOption();
            $response = $this->client->send($request, $options);

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return json_decode($response->getBody()->getContents());

        } catch (ApiException | GuzzleException $e) {
            throw $e->getResponseBody();
        }
    }

    protected function deleteStoreCartRequest($store_id, $cart_id): Request
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $store_id when calling '
            );
        }
        // verify the required parameter 'cart_id' is set
        if ($cart_id === null || (is_array($cart_id) && count($cart_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $cart_id when calling '
            );
        }

        $resourcePath = '/ecommerce/stores/{store_id}/carts/{cart_id}';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // path params
        $resourcePath = str_replace(
            '{' . 'store_id' . '}',
            ObjectSerializer::toPathValue($store_id),
            $resourcePath
        );
        // path params
        $resourcePath = str_replace(
            '{' . 'cart_id' . '}',
            ObjectSerializer::toPathValue($cart_id),
            $resourcePath
        );

        // body params
        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json'],
            ['application/json']
        );


        // Basic Authentication
        if (!empty($this->config->getUsername()) && !empty($this->config->getPassword())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        // OAuth Authentication
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?$query" : ''),
            $headers,
            $httpBody
        );
    }

    public function deleteCartLineItem($store_id, $cart_id, $line_id)
    {
        $this->deleteCartLineItemWithHttpInfo($store_id, $cart_id, $line_id);
    }

    public function deleteCartLineItemWithHttpInfo($store_id, $cart_id, $line_id)
    {
        $request = $this->deleteCartLineItemRequest($store_id, $cart_id, $line_id);

        try {
            $options = $this->createHttpClientOption();
            $response = $this->client->send($request, $options);

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return json_decode($response->getBody()->getContents());

        } catch (ApiException | GuzzleException $e) {
            throw $e->getResponseBody();
        }
    }

    protected function deleteCartLineItemRequest($store_id, $cart_id, $line_id): Request
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $store_id when calling '
            );
        }
        // verify the required parameter 'cart_id' is set
        if ($cart_id === null || (is_array($cart_id) && count($cart_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $cart_id when calling '
            );
        }
        // verify the required parameter 'line_id' is set
        if ($line_id === null || (is_array($line_id) && count($line_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $line_id when calling '
            );
        }

        $resourcePath = '/ecommerce/stores/{store_id}/carts/{cart_id}/lines/{line_id}';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // path params
        $resourcePath = str_replace(
            '{' . 'store_id' . '}',
            ObjectSerializer::toPathValue($store_id),
            $resourcePath
        );
        // path params
        $resourcePath = str_replace(
            '{' . 'cart_id' . '}',
            ObjectSerializer::toPathValue($cart_id),
            $resourcePath
        );
        // path params
        $resourcePath = str_replace(
            '{' . 'line_id' . '}',
            ObjectSerializer::toPathValue($line_id),
            $resourcePath
        );

        // body params
        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json'],
            ['application/json']
        );


        // Basic Authentication
        if (!empty($this->config->getUsername()) && !empty($this->config->getPassword())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        // OAuth Authentication
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?$query" : ''),
            $headers,
            $httpBody
        );
    }

    public function deleteStoreCustomer($store_id, $customer_id)
    {
        $this->deleteStoreCustomerWithHttpInfo($store_id, $customer_id);
    }

    public function deleteStoreCustomerWithHttpInfo($store_id, $customer_id)
    {
        $request = $this->deleteStoreCustomerRequest($store_id, $customer_id);

        try {
            $options = $this->createHttpClientOption();
            $response = $this->client->send($request, $options);

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return json_decode($response->getBody()->getContents());

        } catch (ApiException | GuzzleException $e) {
            throw $e->getResponseBody();
        }
    }

    protected function deleteStoreCustomerRequest($store_id, $customer_id): Request
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $store_id when calling '
            );
        }
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null || (is_array($customer_id) && count($customer_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $customer_id when calling '
            );
        }

        $resourcePath = '/ecommerce/stores/{store_id}/customers/{customer_id}';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // path params
        $resourcePath = str_replace(
            '{' . 'store_id' . '}',
            ObjectSerializer::toPathValue($store_id),
            $resourcePath
        );
        // path params
        $resourcePath = str_replace(
            '{' . 'customer_id' . '}',
            ObjectSerializer::toPathValue($customer_id),
            $resourcePath
        );

        // body params
        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json'],
            ['application/json']
        );


        // Basic Authentication
        if (!empty($this->config->getUsername()) && !empty($this->config->getPassword())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        // OAuth Authentication
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?$query" : ''),
            $headers,
            $httpBody
        );
    }

    public function deleteOrder($store_id, $order_id)
    {
        $this->deleteOrderWithHttpInfo($store_id, $order_id);
    }

    public function deleteOrderWithHttpInfo($store_id, $order_id)
    {
        $request = $this->deleteOrderRequest($store_id, $order_id);

        try {
            $options = $this->createHttpClientOption();
            $response = $this->client->send($request, $options);

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return json_decode($response->getBody()->getContents());

        } catch (ApiException | GuzzleException $e) {
            throw $e->getResponseBody();
        }
    }

    protected function deleteOrderRequest($store_id, $order_id): Request
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $store_id when calling '
            );
        }
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order_id when calling '
            );
        }

        $resourcePath = '/ecommerce/stores/{store_id}/orders/{order_id}';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // path params
        $resourcePath = str_replace(
            '{' . 'store_id' . '}',
            ObjectSerializer::toPathValue($store_id),
            $resourcePath
        );
        // path params
        $resourcePath = str_replace(
            '{' . 'order_id' . '}',
            ObjectSerializer::toPathValue($order_id),
            $resourcePath
        );

        // body params
        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json'],
            ['application/json']
        );


        // Basic Authentication
        if (!empty($this->config->getUsername()) && !empty($this->config->getPassword())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        // OAuth Authentication
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?$query" : ''),
            $headers,
            $httpBody
        );
    }

    public function deleteOrderLineItem($store_id, $order_id, $line_id)
    {
        $this->deleteOrderLineItemWithHttpInfo($store_id, $order_id, $line_id);
    }

    public function deleteOrderLineItemWithHttpInfo($store_id, $order_id, $line_id)
    {
        $request = $this->deleteOrderLineItemRequest($store_id, $order_id, $line_id);

        try {
            $options = $this->createHttpClientOption();
            $response = $this->client->send($request, $options);

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return json_decode($response->getBody()->getContents());

        } catch (ApiException | GuzzleException $e) {
            throw $e->getResponseBody();
        }
    }

    protected function deleteOrderLineItemRequest($store_id, $order_id, $line_id): Request
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $store_id when calling '
            );
        }
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order_id when calling '
            );
        }
        // verify the required parameter 'line_id' is set
        if ($line_id === null || (is_array($line_id) && count($line_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $line_id when calling '
            );
        }

        $resourcePath = '/ecommerce/stores/{store_id}/orders/{order_id}/lines/{line_id}';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // path params
        $resourcePath = str_replace(
            '{' . 'store_id' . '}',
            ObjectSerializer::toPathValue($store_id),
            $resourcePath
        );
        // path params
        $resourcePath = str_replace(
            '{' . 'order_id' . '}',
            ObjectSerializer::toPathValue($order_id),
            $resourcePath
        );
        // path params
        $resourcePath = str_replace(
            '{' . 'line_id' . '}',
            ObjectSerializer::toPathValue($line_id),
            $resourcePath
        );

        // body params
        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json'],
            ['application/json']
        );


        // Basic Authentication
        if (!empty($this->config->getUsername()) && !empty($this->config->getPassword())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        // OAuth Authentication
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?$query" : ''),
            $headers,
            $httpBody
        );
    }

    public function deleteStoreProduct($store_id, $product_id)
    {
        $this->deleteStoreProductWithHttpInfo($store_id, $product_id);
    }

    public function deleteStoreProductWithHttpInfo($store_id, $product_id)
    {
        $request = $this->deleteStoreProductRequest($store_id, $product_id);

        try {
            $options = $this->createHttpClientOption();
            $response = $this->client->send($request, $options);

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return json_decode($response->getBody()->getContents());

        } catch (ApiException | GuzzleException $e) {
            throw $e->getResponseBody();
        }
    }

    protected function deleteStoreProductRequest($store_id, $product_id): Request
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $store_id when calling '
            );
        }
        // verify the required parameter 'product_id' is set
        if ($product_id === null || (is_array($product_id) && count($product_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $product_id when calling '
            );
        }

        $resourcePath = '/ecommerce/stores/{store_id}/products/{product_id}';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // path params
        $resourcePath = str_replace(
            '{' . 'store_id' . '}',
            ObjectSerializer::toPathValue($store_id),
            $resourcePath
        );
        // path params
        $resourcePath = str_replace(
            '{' . 'product_id' . '}',
            ObjectSerializer::toPathValue($product_id),
            $resourcePath
        );

        // body params
        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json'],
            ['application/json']
        );


        // Basic Authentication
        if (!empty($this->config->getUsername()) && !empty($this->config->getPassword())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        // OAuth Authentication
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?$query" : ''),
            $headers,
            $httpBody
        );
    }

    public function deleteProductImage($store_id, $product_id, $image_id)
    {
        $this->deleteProductImageWithHttpInfo($store_id, $product_id, $image_id);
    }

    public function deleteProductImageWithHttpInfo($store_id, $product_id, $image_id)
    {
        $request = $this->deleteProductImageRequest($store_id, $product_id, $image_id);

        try {
            $options = $this->createHttpClientOption();
            $response = $this->client->send($request, $options);

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return json_decode($response->getBody()->getContents());

        } catch (ApiException | GuzzleException $e) {
            throw $e->getResponseBody();
        }
    }

    protected function deleteProductImageRequest($store_id, $product_id, $image_id): Request
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $store_id when calling '
            );
        }
        // verify the required parameter 'product_id' is set
        if ($product_id === null || (is_array($product_id) && count($product_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $product_id when calling '
            );
        }
        // verify the required parameter 'image_id' is set
        if ($image_id === null || (is_array($image_id) && count($image_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $image_id when calling '
            );
        }

        $resourcePath = '/ecommerce/stores/{store_id}/products/{product_id}/images/{image_id}';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // path params
        $resourcePath = str_replace(
            '{' . 'store_id' . '}',
            ObjectSerializer::toPathValue($store_id),
            $resourcePath
        );
        // path params
        $resourcePath = str_replace(
            '{' . 'product_id' . '}',
            ObjectSerializer::toPathValue($product_id),
            $resourcePath
        );
        // path params
        $resourcePath = str_replace(
            '{' . 'image_id' . '}',
            ObjectSerializer::toPathValue($image_id),
            $resourcePath
        );

        // body params
        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json'],
            ['application/json']
        );


        // Basic Authentication
        if (!empty($this->config->getUsername()) && !empty($this->config->getPassword())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        // OAuth Authentication
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?$query" : ''),
            $headers,
            $httpBody
        );
    }

    public function deleteProductVariant($store_id, $product_id, $variant_id)
    {
        $this->deleteProductVariantWithHttpInfo($store_id, $product_id, $variant_id);
    }

    public function deleteProductVariantWithHttpInfo($store_id, $product_id, $variant_id)
    {
        $request = $this->deleteProductVariantRequest($store_id, $product_id, $variant_id);

        try {
            $options = $this->createHttpClientOption();
            $response = $this->client->send($request, $options);

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return json_decode($response->getBody()->getContents());

        } catch (ApiException | GuzzleException $e) {
            throw $e->getResponseBody();
        }
    }

    protected function deleteProductVariantRequest($store_id, $product_id, $variant_id): Request
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $store_id when calling '
            );
        }
        // verify the required parameter 'product_id' is set
        if ($product_id === null || (is_array($product_id) && count($product_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $product_id when calling '
            );
        }
        // verify the required parameter 'variant_id' is set
        if ($variant_id === null || (is_array($variant_id) && count($variant_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $variant_id when calling '
            );
        }

        $resourcePath = '/ecommerce/stores/{store_id}/products/{product_id}/variants/{variant_id}';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // path params
        $resourcePath = str_replace(
            '{' . 'store_id' . '}',
            ObjectSerializer::toPathValue($store_id),
            $resourcePath
        );
        // path params
        $resourcePath = str_replace(
            '{' . 'product_id' . '}',
            ObjectSerializer::toPathValue($product_id),
            $resourcePath
        );
        // path params
        $resourcePath = str_replace(
            '{' . 'variant_id' . '}',
            ObjectSerializer::toPathValue($variant_id),
            $resourcePath
        );

        // body params
        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json'],
            ['application/json']
        );


        // Basic Authentication
        if (!empty($this->config->getUsername()) && !empty($this->config->getPassword())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        // OAuth Authentication
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?$query" : ''),
            $headers,
            $httpBody
        );
    }

    public function deletePromoCode($store_id, $promo_rule_id, $promo_code_id)
    {
        $this->deletePromoCodeWithHttpInfo($store_id, $promo_rule_id, $promo_code_id);
    }

    public function deletePromoCodeWithHttpInfo($store_id, $promo_rule_id, $promo_code_id)
    {
        $request = $this->deletePromoCodeRequest($store_id, $promo_rule_id, $promo_code_id);

        try {
            $options = $this->createHttpClientOption();
            $response = $this->client->send($request, $options);

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return json_decode($response->getBody()->getContents());

        } catch (ApiException | GuzzleException $e) {
            throw $e->getResponseBody();
        }
    }

    protected function deletePromoCodeRequest($store_id, $promo_rule_id, $promo_code_id): Request
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $store_id when calling '
            );
        }
        // verify the required parameter 'promo_rule_id' is set
        if ($promo_rule_id === null || (is_array($promo_rule_id) && count($promo_rule_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $promo_rule_id when calling '
            );
        }
        // verify the required parameter 'promo_code_id' is set
        if ($promo_code_id === null || (is_array($promo_code_id) && count($promo_code_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $promo_code_id when calling '
            );
        }

        $resourcePath = '/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}/promo-codes/{promo_code_id}';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // path params
        $resourcePath = str_replace(
            '{' . 'store_id' . '}',
            ObjectSerializer::toPathValue($store_id),
            $resourcePath
        );
        // path params
        $resourcePath = str_replace(
            '{' . 'promo_rule_id' . '}',
            ObjectSerializer::toPathValue($promo_rule_id),
            $resourcePath
        );
        // path params
        $resourcePath = str_replace(
            '{' . 'promo_code_id' . '}',
            ObjectSerializer::toPathValue($promo_code_id),
            $resourcePath
        );

        // body params
        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json'],
            ['application/json']
        );


        // Basic Authentication
        if (!empty($this->config->getUsername()) && !empty($this->config->getPassword())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        // OAuth Authentication
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?$query" : ''),
            $headers,
            $httpBody
        );
    }

    public function deletePromoRule($store_id, $promo_rule_id)
    {
        $this->deletePromoRuleWithHttpInfo($store_id, $promo_rule_id);
    }

    public function deletePromoRuleWithHttpInfo($store_id, $promo_rule_id)
    {
        $request = $this->deletePromoRuleRequest($store_id, $promo_rule_id);

        try {
            $options = $this->createHttpClientOption();
            $response = $this->client->send($request, $options);

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return json_decode($response->getBody()->getContents());

        } catch (ApiException | GuzzleException $e) {
            throw $e->getResponseBody();
        }
    }

    protected function deletePromoRuleRequest($store_id, $promo_rule_id): Request
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $store_id when calling '
            );
        }
        // verify the required parameter 'promo_rule_id' is set
        if ($promo_rule_id === null || (is_array($promo_rule_id) && count($promo_rule_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $promo_rule_id when calling '
            );
        }

        $resourcePath = '/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // path params
        $resourcePath = str_replace(
            '{' . 'store_id' . '}',
            ObjectSerializer::toPathValue($store_id),
            $resourcePath
        );
        // path params
        $resourcePath = str_replace(
            '{' . 'promo_rule_id' . '}',
            ObjectSerializer::toPathValue($promo_rule_id),
            $resourcePath
        );

        // body params
        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json'],
            ['application/json']
        );


        // Basic Authentication
        if (!empty($this->config->getUsername()) && !empty($this->config->getPassword())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        // OAuth Authentication
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?$query" : ''),
            $headers,
            $httpBody
        );
    }

    public function orders($fields = null, $exclude_fields = null, $count = '10', $offset = '0', $campaign_id = null, $outreach_id = null, $customer_id = null, $has_outreach = null)
    {
        return $this->ordersWithHttpInfo($fields, $exclude_fields, $count, $offset, $campaign_id, $outreach_id, $customer_id, $has_outreach);
    }

    public function ordersWithHttpInfo($fields = null, $exclude_fields = null, $count = '10', $offset = '0', $campaign_id = null, $outreach_id = null, $customer_id = null, $has_outreach = null)
    {
        $request = $this->ordersRequest($fields, $exclude_fields, $count, $offset, $campaign_id, $outreach_id, $customer_id, $has_outreach);

        try {
            $options = $this->createHttpClientOption();
            $response = $this->client->send($request, $options);

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return json_decode($response->getBody()->getContents());

        } catch (ApiException | GuzzleException $e) {
            throw $e->getResponseBody();
        }
    }

    protected function ordersRequest($fields = null, $exclude_fields = null, $count = '10', $offset = '0', $campaign_id = null, $outreach_id = null, $customer_id = null, $has_outreach = null): Request
    {
        if ($count !== null && $count > 1000) {
            throw new InvalidArgumentException('invalid value for "$count" when calling EcommerceApi., must be smaller than or equal to 1000.');
        }


        $resourcePath = '/ecommerce/orders';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        // query params
        if (is_array($fields)) {
            $queryParams['fields'] = ObjectSerializer::serializeCollection($fields, 'csv');
        } else
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if (is_array($exclude_fields)) {
            $queryParams['exclude_fields'] = ObjectSerializer::serializeCollection($exclude_fields, 'csv');
        } else
        if ($exclude_fields !== null) {
            $queryParams['exclude_fields'] = ObjectSerializer::toQueryValue($exclude_fields);
        }
        // query params
        if ($count !== null) {
            $queryParams['count'] = ObjectSerializer::toQueryValue($count);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }
        // query params
        if ($campaign_id !== null) {
            $queryParams['campaign_id'] = ObjectSerializer::toQueryValue($campaign_id);
        }
        // query params
        if ($outreach_id !== null) {
            $queryParams['outreach_id'] = ObjectSerializer::toQueryValue($outreach_id);
        }
        // query params
        if ($customer_id !== null) {
            $queryParams['customer_id'] = ObjectSerializer::toQueryValue($customer_id);
        }
        // query params
        if ($has_outreach !== null) {
            $queryParams['has_outreach'] = ObjectSerializer::toQueryValue($has_outreach);
        }


        // body params
        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json'],
            ['application/json']
        );


        // Basic Authentication
        if (!empty($this->config->getUsername()) && !empty($this->config->getPassword())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        // OAuth Authentication
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?$query" : ''),
            $headers,
            $httpBody
        );
    }

    public function stores($fields = null, $exclude_fields = null, $count = '10', $offset = '0')
    {
        return $this->storesWithHttpInfo($fields, $exclude_fields, $count, $offset);
    }

    public function storesWithHttpInfo($fields = null, $exclude_fields = null, $count = '10', $offset = '0')
    {
        $request = $this->storesRequest($fields, $exclude_fields, $count, $offset);

        try {
            $options = $this->createHttpClientOption();
            $response = $this->client->send($request, $options);

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return json_decode($response->getBody()->getContents());

        } catch (ApiException | GuzzleException $e) {
            throw $e->getResponseBody();
        }
    }

    protected function storesRequest($fields = null, $exclude_fields = null, $count = '10', $offset = '0'): Request
    {
        if ($count !== null && $count > 1000) {
            throw new InvalidArgumentException('invalid value for "$count" when calling EcommerceApi., must be smaller than or equal to 1000.');
        }


        $resourcePath = '/ecommerce/stores';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        // query params
        if (is_array($fields)) {
            $queryParams['fields'] = ObjectSerializer::serializeCollection($fields, 'csv');
        } else
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if (is_array($exclude_fields)) {
            $queryParams['exclude_fields'] = ObjectSerializer::serializeCollection($exclude_fields, 'csv');
        } else
        if ($exclude_fields !== null) {
            $queryParams['exclude_fields'] = ObjectSerializer::toQueryValue($exclude_fields);
        }
        // query params
        if ($count !== null) {
            $queryParams['count'] = ObjectSerializer::toQueryValue($count);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }


        // body params
        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json'],
            ['application/json']
        );


        // Basic Authentication
        if (!empty($this->config->getUsername()) && !empty($this->config->getPassword())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        // OAuth Authentication
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?$query" : ''),
            $headers,
            $httpBody
        );
    }

    public function getStore($store_id, $fields = null, $exclude_fields = null)
    {
        return $this->getStoreWithHttpInfo($store_id, $fields, $exclude_fields);
    }

    public function getStoreWithHttpInfo($store_id, $fields = null, $exclude_fields = null)
    {
        $request = $this->getStoreRequest($store_id, $fields, $exclude_fields);

        try {
            $options = $this->createHttpClientOption();
            $response = $this->client->send($request, $options);

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return json_decode($response->getBody()->getContents());

        } catch (ApiException | GuzzleException $e) {
            throw $e->getResponseBody();
        }
    }

    protected function getStoreRequest($store_id, $fields = null, $exclude_fields = null): Request
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $store_id when calling '
            );
        }

        $resourcePath = '/ecommerce/stores/{store_id}';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        // query params
        if (is_array($fields)) {
            $queryParams['fields'] = ObjectSerializer::serializeCollection($fields, 'csv');
        } else
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if (is_array($exclude_fields)) {
            $queryParams['exclude_fields'] = ObjectSerializer::serializeCollection($exclude_fields, 'csv');
        } else
        if ($exclude_fields !== null) {
            $queryParams['exclude_fields'] = ObjectSerializer::toQueryValue($exclude_fields);
        }

        // path params
        $resourcePath = str_replace(
            '{' . 'store_id' . '}',
            ObjectSerializer::toPathValue($store_id),
            $resourcePath
        );

        // body params
        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json'],
            ['application/json']
        );


        // Basic Authentication
        if (!empty($this->config->getUsername()) && !empty($this->config->getPassword())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        // OAuth Authentication
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?$query" : ''),
            $headers,
            $httpBody
        );
    }

    public function getStoreCarts($store_id, $fields = null, $exclude_fields = null, $count = '10', $offset = '0')
    {
        return $this->getStoreCartsWithHttpInfo($store_id, $fields, $exclude_fields, $count, $offset);
    }

    public function getStoreCartsWithHttpInfo($store_id, $fields = null, $exclude_fields = null, $count = '10', $offset = '0')
    {
        $request = $this->getStoreCartsRequest($store_id, $fields, $exclude_fields, $count, $offset);

        try {
            $options = $this->createHttpClientOption();
            $response = $this->client->send($request, $options);

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return json_decode($response->getBody()->getContents());

        } catch (ApiException | GuzzleException $e) {
            throw $e->getResponseBody();
        }
    }

    protected function getStoreCartsRequest($store_id, $fields = null, $exclude_fields = null, $count = '10', $offset = '0'): Request
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $store_id when calling '
            );
        }
        if ($count !== null && $count > 1000) {
            throw new InvalidArgumentException('invalid value for "$count" when calling EcommerceApi., must be smaller than or equal to 1000.');
        }


        $resourcePath = '/ecommerce/stores/{store_id}/carts';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        // query params
        if (is_array($fields)) {
            $queryParams['fields'] = ObjectSerializer::serializeCollection($fields, 'csv');
        } else
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if (is_array($exclude_fields)) {
            $queryParams['exclude_fields'] = ObjectSerializer::serializeCollection($exclude_fields, 'csv');
        } else
        if ($exclude_fields !== null) {
            $queryParams['exclude_fields'] = ObjectSerializer::toQueryValue($exclude_fields);
        }
        // query params
        if ($count !== null) {
            $queryParams['count'] = ObjectSerializer::toQueryValue($count);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }

        // path params
        $resourcePath = str_replace(
            '{' . 'store_id' . '}',
            ObjectSerializer::toPathValue($store_id),
            $resourcePath
        );

        // body params
        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json'],
            ['application/json']
        );


        // Basic Authentication
        if (!empty($this->config->getUsername()) && !empty($this->config->getPassword())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        // OAuth Authentication
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?$query" : ''),
            $headers,
            $httpBody
        );
    }

    public function getStoreCart($store_id, $cart_id, $fields = null, $exclude_fields = null)
    {
        return $this->getStoreCartWithHttpInfo($store_id, $cart_id, $fields, $exclude_fields);
    }

    public function getStoreCartWithHttpInfo($store_id, $cart_id, $fields = null, $exclude_fields = null)
    {
        $request = $this->getStoreCartRequest($store_id, $cart_id, $fields, $exclude_fields);

        try {
            $options = $this->createHttpClientOption();
            $response = $this->client->send($request, $options);

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return json_decode($response->getBody()->getContents());

        } catch (ApiException | GuzzleException $e) {
            throw $e->getResponseBody();
        }
    }

    protected function getStoreCartRequest($store_id, $cart_id, $fields = null, $exclude_fields = null): Request
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $store_id when calling '
            );
        }
        // verify the required parameter 'cart_id' is set
        if ($cart_id === null || (is_array($cart_id) && count($cart_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $cart_id when calling '
            );
        }

        $resourcePath = '/ecommerce/stores/{store_id}/carts/{cart_id}';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        // query params
        if (is_array($fields)) {
            $queryParams['fields'] = ObjectSerializer::serializeCollection($fields, 'csv');
        } else
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if (is_array($exclude_fields)) {
            $queryParams['exclude_fields'] = ObjectSerializer::serializeCollection($exclude_fields, 'csv');
        } else
        if ($exclude_fields !== null) {
            $queryParams['exclude_fields'] = ObjectSerializer::toQueryValue($exclude_fields);
        }

        // path params
        $resourcePath = str_replace(
            '{' . 'store_id' . '}',
            ObjectSerializer::toPathValue($store_id),
            $resourcePath
        );
        // path params
        $resourcePath = str_replace(
            '{' . 'cart_id' . '}',
            ObjectSerializer::toPathValue($cart_id),
            $resourcePath
        );

        // body params
        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json'],
            ['application/json']
        );


        // Basic Authentication
        if (!empty($this->config->getUsername()) && !empty($this->config->getPassword())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        // OAuth Authentication
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?$query" : ''),
            $headers,
            $httpBody
        );
    }

    public function getAllCartLineItems($store_id, $cart_id, $fields = null, $exclude_fields = null, $count = '10', $offset = '0')
    {
        return $this->getAllCartLineItemsWithHttpInfo($store_id, $cart_id, $fields, $exclude_fields, $count, $offset);
    }

    public function getAllCartLineItemsWithHttpInfo($store_id, $cart_id, $fields = null, $exclude_fields = null, $count = '10', $offset = '0')
    {
        $request = $this->getAllCartLineItemsRequest($store_id, $cart_id, $fields, $exclude_fields, $count, $offset);

        try {
            $options = $this->createHttpClientOption();
            $response = $this->client->send($request, $options);

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return json_decode($response->getBody()->getContents());

        } catch (ApiException | GuzzleException $e) {
            throw $e->getResponseBody();
        }
    }

    protected function getAllCartLineItemsRequest($store_id, $cart_id, $fields = null, $exclude_fields = null, $count = '10', $offset = '0'): Request
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $store_id when calling '
            );
        }
        // verify the required parameter 'cart_id' is set
        if ($cart_id === null || (is_array($cart_id) && count($cart_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $cart_id when calling '
            );
        }
        if ($count !== null && $count > 1000) {
            throw new InvalidArgumentException('invalid value for "$count" when calling EcommerceApi., must be smaller than or equal to 1000.');
        }


        $resourcePath = '/ecommerce/stores/{store_id}/carts/{cart_id}/lines';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        // query params
        if (is_array($fields)) {
            $queryParams['fields'] = ObjectSerializer::serializeCollection($fields, 'csv');
        } else
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if (is_array($exclude_fields)) {
            $queryParams['exclude_fields'] = ObjectSerializer::serializeCollection($exclude_fields, 'csv');
        } else
        if ($exclude_fields !== null) {
            $queryParams['exclude_fields'] = ObjectSerializer::toQueryValue($exclude_fields);
        }
        // query params
        if ($count !== null) {
            $queryParams['count'] = ObjectSerializer::toQueryValue($count);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }

        // path params
        $resourcePath = str_replace(
            '{' . 'store_id' . '}',
            ObjectSerializer::toPathValue($store_id),
            $resourcePath
        );
        // path params
        $resourcePath = str_replace(
            '{' . 'cart_id' . '}',
            ObjectSerializer::toPathValue($cart_id),
            $resourcePath
        );

        // body params
        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json'],
            ['application/json']
        );


        // Basic Authentication
        if (!empty($this->config->getUsername()) && !empty($this->config->getPassword())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        // OAuth Authentication
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?$query" : ''),
            $headers,
            $httpBody
        );
    }

    public function getCartLineItem($store_id, $cart_id, $line_id, $fields = null, $exclude_fields = null)
    {
        return $this->getCartLineItemWithHttpInfo($store_id, $cart_id, $line_id, $fields, $exclude_fields);
    }

    public function getCartLineItemWithHttpInfo($store_id, $cart_id, $line_id, $fields = null, $exclude_fields = null)
    {
        $request = $this->getCartLineItemRequest($store_id, $cart_id, $line_id, $fields, $exclude_fields);

        try {
            $options = $this->createHttpClientOption();
            $response = $this->client->send($request, $options);

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return json_decode($response->getBody()->getContents());

        } catch (ApiException | GuzzleException $e) {
            throw $e->getResponseBody();
        }
    }

    protected function getCartLineItemRequest($store_id, $cart_id, $line_id, $fields = null, $exclude_fields = null): Request
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $store_id when calling '
            );
        }
        // verify the required parameter 'cart_id' is set
        if ($cart_id === null || (is_array($cart_id) && count($cart_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $cart_id when calling '
            );
        }
        // verify the required parameter 'line_id' is set
        if ($line_id === null || (is_array($line_id) && count($line_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $line_id when calling '
            );
        }

        $resourcePath = '/ecommerce/stores/{store_id}/carts/{cart_id}/lines/{line_id}';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        // query params
        if (is_array($fields)) {
            $queryParams['fields'] = ObjectSerializer::serializeCollection($fields, 'csv');
        } else
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if (is_array($exclude_fields)) {
            $queryParams['exclude_fields'] = ObjectSerializer::serializeCollection($exclude_fields, 'csv');
        } else
        if ($exclude_fields !== null) {
            $queryParams['exclude_fields'] = ObjectSerializer::toQueryValue($exclude_fields);
        }

        // path params
        $resourcePath = str_replace(
            '{' . 'store_id' . '}',
            ObjectSerializer::toPathValue($store_id),
            $resourcePath
        );
        // path params
        $resourcePath = str_replace(
            '{' . 'cart_id' . '}',
            ObjectSerializer::toPathValue($cart_id),
            $resourcePath
        );
        // path params
        $resourcePath = str_replace(
            '{' . 'line_id' . '}',
            ObjectSerializer::toPathValue($line_id),
            $resourcePath
        );

        // body params
        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json'],
            ['application/json']
        );


        // Basic Authentication
        if (!empty($this->config->getUsername()) && !empty($this->config->getPassword())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        // OAuth Authentication
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?$query" : ''),
            $headers,
            $httpBody
        );
    }

    public function getAllStoreCustomers($store_id, $fields = null, $exclude_fields = null, $count = '10', $offset = '0', $email_address = null)
    {
        return $this->getAllStoreCustomersWithHttpInfo($store_id, $fields, $exclude_fields, $count, $offset, $email_address);
    }

    public function getAllStoreCustomersWithHttpInfo($store_id, $fields = null, $exclude_fields = null, $count = '10', $offset = '0', $email_address = null)
    {
        $request = $this->getAllStoreCustomersRequest($store_id, $fields, $exclude_fields, $count, $offset, $email_address);

        try {
            $options = $this->createHttpClientOption();
            $response = $this->client->send($request, $options);

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return json_decode($response->getBody()->getContents());

        } catch (ApiException | GuzzleException $e) {
            throw $e->getResponseBody();
        }
    }

    protected function getAllStoreCustomersRequest($store_id, $fields = null, $exclude_fields = null, $count = '10', $offset = '0', $email_address = null): Request
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $store_id when calling '
            );
        }
        if ($count !== null && $count > 1000) {
            throw new InvalidArgumentException('invalid value for "$count" when calling EcommerceApi., must be smaller than or equal to 1000.');
        }


        $resourcePath = '/ecommerce/stores/{store_id}/customers';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        // query params
        if (is_array($fields)) {
            $queryParams['fields'] = ObjectSerializer::serializeCollection($fields, 'csv');
        } else
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if (is_array($exclude_fields)) {
            $queryParams['exclude_fields'] = ObjectSerializer::serializeCollection($exclude_fields, 'csv');
        } else
        if ($exclude_fields !== null) {
            $queryParams['exclude_fields'] = ObjectSerializer::toQueryValue($exclude_fields);
        }
        // query params
        if ($count !== null) {
            $queryParams['count'] = ObjectSerializer::toQueryValue($count);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }
        // query params
        if ($email_address !== null) {
            $queryParams['email_address'] = ObjectSerializer::toQueryValue($email_address);
        }

        // path params
        $resourcePath = str_replace(
            '{' . 'store_id' . '}',
            ObjectSerializer::toPathValue($store_id),
            $resourcePath
        );

        // body params
        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json'],
            ['application/json']
        );


        // Basic Authentication
        if (!empty($this->config->getUsername()) && !empty($this->config->getPassword())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        // OAuth Authentication
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?$query" : ''),
            $headers,
            $httpBody
        );
    }

    public function getStoreCustomer($store_id, $customer_id, $fields = null, $exclude_fields = null)
    {
        return $this->getStoreCustomerWithHttpInfo($store_id, $customer_id, $fields, $exclude_fields);
    }

    public function getStoreCustomerWithHttpInfo($store_id, $customer_id, $fields = null, $exclude_fields = null)
    {
        $request = $this->getStoreCustomerRequest($store_id, $customer_id, $fields, $exclude_fields);

        try {
            $options = $this->createHttpClientOption();
            $response = $this->client->send($request, $options);

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return json_decode($response->getBody()->getContents());

        } catch (ApiException | GuzzleException $e) {
            throw $e->getResponseBody();
        }
    }

    protected function getStoreCustomerRequest($store_id, $customer_id, $fields = null, $exclude_fields = null): Request
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $store_id when calling '
            );
        }
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null || (is_array($customer_id) && count($customer_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $customer_id when calling '
            );
        }

        $resourcePath = '/ecommerce/stores/{store_id}/customers/{customer_id}';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        // query params
        if (is_array($fields)) {
            $queryParams['fields'] = ObjectSerializer::serializeCollection($fields, 'csv');
        } else
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if (is_array($exclude_fields)) {
            $queryParams['exclude_fields'] = ObjectSerializer::serializeCollection($exclude_fields, 'csv');
        } else
        if ($exclude_fields !== null) {
            $queryParams['exclude_fields'] = ObjectSerializer::toQueryValue($exclude_fields);
        }

        // path params
        $resourcePath = str_replace(
            '{' . 'store_id' . '}',
            ObjectSerializer::toPathValue($store_id),
            $resourcePath
        );
        // path params
        $resourcePath = str_replace(
            '{' . 'customer_id' . '}',
            ObjectSerializer::toPathValue($customer_id),
            $resourcePath
        );

        // body params
        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json'],
            ['application/json']
        );


        // Basic Authentication
        if (!empty($this->config->getUsername()) && !empty($this->config->getPassword())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        // OAuth Authentication
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?$query" : ''),
            $headers,
            $httpBody
        );
    }

    public function getStoreOrders($store_id, $fields = null, $exclude_fields = null, $count = '10', $offset = '0', $customer_id = null, $has_outreach = null, $campaign_id = null, $outreach_id = null)
    {
        return $this->getStoreOrdersWithHttpInfo($store_id, $fields, $exclude_fields, $count, $offset, $customer_id, $has_outreach, $campaign_id, $outreach_id);
    }

    public function getStoreOrdersWithHttpInfo($store_id, $fields = null, $exclude_fields = null, $count = '10', $offset = '0', $customer_id = null, $has_outreach = null, $campaign_id = null, $outreach_id = null)
    {
        $request = $this->getStoreOrdersRequest($store_id, $fields, $exclude_fields, $count, $offset, $customer_id, $has_outreach, $campaign_id, $outreach_id);

        try {
            $options = $this->createHttpClientOption();
            $response = $this->client->send($request, $options);

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return json_decode($response->getBody()->getContents());

        } catch (ApiException | GuzzleException $e) {
            throw $e->getResponseBody();
        }
    }

    protected function getStoreOrdersRequest($store_id, $fields = null, $exclude_fields = null, $count = '10', $offset = '0', $customer_id = null, $has_outreach = null, $campaign_id = null, $outreach_id = null): Request
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $store_id when calling '
            );
        }
        if ($count !== null && $count > 1000) {
            throw new InvalidArgumentException('invalid value for "$count" when calling EcommerceApi., must be smaller than or equal to 1000.');
        }


        $resourcePath = '/ecommerce/stores/{store_id}/orders';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        // query params
        if (is_array($fields)) {
            $queryParams['fields'] = ObjectSerializer::serializeCollection($fields, 'csv');
        } else
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if (is_array($exclude_fields)) {
            $queryParams['exclude_fields'] = ObjectSerializer::serializeCollection($exclude_fields, 'csv');
        } else
        if ($exclude_fields !== null) {
            $queryParams['exclude_fields'] = ObjectSerializer::toQueryValue($exclude_fields);
        }
        // query params
        if ($count !== null) {
            $queryParams['count'] = ObjectSerializer::toQueryValue($count);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }
        // query params
        if ($customer_id !== null) {
            $queryParams['customer_id'] = ObjectSerializer::toQueryValue($customer_id);
        }
        // query params
        if ($has_outreach !== null) {
            $queryParams['has_outreach'] = ObjectSerializer::toQueryValue($has_outreach);
        }
        // query params
        if ($campaign_id !== null) {
            $queryParams['campaign_id'] = ObjectSerializer::toQueryValue($campaign_id);
        }
        // query params
        if ($outreach_id !== null) {
            $queryParams['outreach_id'] = ObjectSerializer::toQueryValue($outreach_id);
        }

        // path params
        $resourcePath = str_replace(
            '{' . 'store_id' . '}',
            ObjectSerializer::toPathValue($store_id),
            $resourcePath
        );

        // body params
        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json'],
            ['application/json']
        );


        // Basic Authentication
        if (!empty($this->config->getUsername()) && !empty($this->config->getPassword())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        // OAuth Authentication
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?$query" : ''),
            $headers,
            $httpBody
        );
    }

    public function getOrder($store_id, $order_id, $fields = null, $exclude_fields = null)
    {
        return $this->getOrderWithHttpInfo($store_id, $order_id, $fields, $exclude_fields);
    }

    public function getOrderWithHttpInfo($store_id, $order_id, $fields = null, $exclude_fields = null)
    {
        $request = $this->getOrderRequest($store_id, $order_id, $fields, $exclude_fields);

        try {
            $options = $this->createHttpClientOption();
            $response = $this->client->send($request, $options);

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return json_decode($response->getBody()->getContents());

        } catch (ApiException | GuzzleException $e) {
            throw $e->getResponseBody();
        }
    }

    protected function getOrderRequest($store_id, $order_id, $fields = null, $exclude_fields = null): Request
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $store_id when calling '
            );
        }
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order_id when calling '
            );
        }

        $resourcePath = '/ecommerce/stores/{store_id}/orders/{order_id}';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        // query params
        if (is_array($fields)) {
            $queryParams['fields'] = ObjectSerializer::serializeCollection($fields, 'csv');
        } else
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if (is_array($exclude_fields)) {
            $queryParams['exclude_fields'] = ObjectSerializer::serializeCollection($exclude_fields, 'csv');
        } else
        if ($exclude_fields !== null) {
            $queryParams['exclude_fields'] = ObjectSerializer::toQueryValue($exclude_fields);
        }

        // path params
        $resourcePath = str_replace(
            '{' . 'store_id' . '}',
            ObjectSerializer::toPathValue($store_id),
            $resourcePath
        );
        // path params
        $resourcePath = str_replace(
            '{' . 'order_id' . '}',
            ObjectSerializer::toPathValue($order_id),
            $resourcePath
        );

        // body params
        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json'],
            ['application/json']
        );


        // Basic Authentication
        if (!empty($this->config->getUsername()) && !empty($this->config->getPassword())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        // OAuth Authentication
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?$query" : ''),
            $headers,
            $httpBody
        );
    }

    public function getAllOrderLineItems($store_id, $order_id, $fields = null, $exclude_fields = null, $count = '10', $offset = '0')
    {
        return $this->getAllOrderLineItemsWithHttpInfo($store_id, $order_id, $fields, $exclude_fields, $count, $offset);
    }

    public function getAllOrderLineItemsWithHttpInfo($store_id, $order_id, $fields = null, $exclude_fields = null, $count = '10', $offset = '0')
    {
        $request = $this->getAllOrderLineItemsRequest($store_id, $order_id, $fields, $exclude_fields, $count, $offset);

        try {
            $options = $this->createHttpClientOption();
            $response = $this->client->send($request, $options);

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return json_decode($response->getBody()->getContents());

        } catch (ApiException | GuzzleException $e) {
            throw $e->getResponseBody();
        }
    }

    protected function getAllOrderLineItemsRequest($store_id, $order_id, $fields = null, $exclude_fields = null, $count = '10', $offset = '0'): Request
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $store_id when calling '
            );
        }
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order_id when calling '
            );
        }
        if ($count !== null && $count > 1000) {
            throw new InvalidArgumentException('invalid value for "$count" when calling EcommerceApi., must be smaller than or equal to 1000.');
        }


        $resourcePath = '/ecommerce/stores/{store_id}/orders/{order_id}/lines';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        // query params
        if (is_array($fields)) {
            $queryParams['fields'] = ObjectSerializer::serializeCollection($fields, 'csv');
        } else
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if (is_array($exclude_fields)) {
            $queryParams['exclude_fields'] = ObjectSerializer::serializeCollection($exclude_fields, 'csv');
        } else
        if ($exclude_fields !== null) {
            $queryParams['exclude_fields'] = ObjectSerializer::toQueryValue($exclude_fields);
        }
        // query params
        if ($count !== null) {
            $queryParams['count'] = ObjectSerializer::toQueryValue($count);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }

        // path params
        $resourcePath = str_replace(
            '{' . 'store_id' . '}',
            ObjectSerializer::toPathValue($store_id),
            $resourcePath
        );
        // path params
        $resourcePath = str_replace(
            '{' . 'order_id' . '}',
            ObjectSerializer::toPathValue($order_id),
            $resourcePath
        );

        // body params
        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json'],
            ['application/json']
        );


        // Basic Authentication
        if (!empty($this->config->getUsername()) && !empty($this->config->getPassword())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        // OAuth Authentication
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?$query" : ''),
            $headers,
            $httpBody
        );
    }

    public function getOrderLineItem($store_id, $order_id, $line_id, $fields = null, $exclude_fields = null)
    {
        return $this->getOrderLineItemWithHttpInfo($store_id, $order_id, $line_id, $fields, $exclude_fields);
    }

    public function getOrderLineItemWithHttpInfo($store_id, $order_id, $line_id, $fields = null, $exclude_fields = null)
    {
        $request = $this->getOrderLineItemRequest($store_id, $order_id, $line_id, $fields, $exclude_fields);

        try {
            $options = $this->createHttpClientOption();
            $response = $this->client->send($request, $options);

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return json_decode($response->getBody()->getContents());

        } catch (ApiException | GuzzleException $e) {
            throw $e->getResponseBody();
        }
    }

    protected function getOrderLineItemRequest($store_id, $order_id, $line_id, $fields = null, $exclude_fields = null): Request
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $store_id when calling '
            );
        }
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order_id when calling '
            );
        }
        // verify the required parameter 'line_id' is set
        if ($line_id === null || (is_array($line_id) && count($line_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $line_id when calling '
            );
        }

        $resourcePath = '/ecommerce/stores/{store_id}/orders/{order_id}/lines/{line_id}';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        // query params
        if (is_array($fields)) {
            $queryParams['fields'] = ObjectSerializer::serializeCollection($fields, 'csv');
        } else
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if (is_array($exclude_fields)) {
            $queryParams['exclude_fields'] = ObjectSerializer::serializeCollection($exclude_fields, 'csv');
        } else
        if ($exclude_fields !== null) {
            $queryParams['exclude_fields'] = ObjectSerializer::toQueryValue($exclude_fields);
        }

        // path params
        $resourcePath = str_replace(
            '{' . 'store_id' . '}',
            ObjectSerializer::toPathValue($store_id),
            $resourcePath
        );
        // path params
        $resourcePath = str_replace(
            '{' . 'order_id' . '}',
            ObjectSerializer::toPathValue($order_id),
            $resourcePath
        );
        // path params
        $resourcePath = str_replace(
            '{' . 'line_id' . '}',
            ObjectSerializer::toPathValue($line_id),
            $resourcePath
        );

        // body params
        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json'],
            ['application/json']
        );


        // Basic Authentication
        if (!empty($this->config->getUsername()) && !empty($this->config->getPassword())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        // OAuth Authentication
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?$query" : ''),
            $headers,
            $httpBody
        );
    }

    public function getAllStoreProducts($store_id, $fields = null, $exclude_fields = null, $count = '10', $offset = '0')
    {
        return $this->getAllStoreProductsWithHttpInfo($store_id, $fields, $exclude_fields, $count, $offset);
    }

    public function getAllStoreProductsWithHttpInfo($store_id, $fields = null, $exclude_fields = null, $count = '10', $offset = '0')
    {
        $request = $this->getAllStoreProductsRequest($store_id, $fields, $exclude_fields, $count, $offset);

        try {
            $options = $this->createHttpClientOption();
            $response = $this->client->send($request, $options);

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return json_decode($response->getBody()->getContents());

        } catch (ApiException | GuzzleException $e) {
            throw $e->getResponseBody();
        }
    }

    protected function getAllStoreProductsRequest($store_id, $fields = null, $exclude_fields = null, $count = '10', $offset = '0'): Request
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $store_id when calling '
            );
        }
        if ($count !== null && $count > 1000) {
            throw new InvalidArgumentException('invalid value for "$count" when calling EcommerceApi., must be smaller than or equal to 1000.');
        }


        $resourcePath = '/ecommerce/stores/{store_id}/products';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        // query params
        if (is_array($fields)) {
            $queryParams['fields'] = ObjectSerializer::serializeCollection($fields, 'csv');
        } else
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if (is_array($exclude_fields)) {
            $queryParams['exclude_fields'] = ObjectSerializer::serializeCollection($exclude_fields, 'csv');
        } else
        if ($exclude_fields !== null) {
            $queryParams['exclude_fields'] = ObjectSerializer::toQueryValue($exclude_fields);
        }
        // query params
        if ($count !== null) {
            $queryParams['count'] = ObjectSerializer::toQueryValue($count);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }

        // path params
        $resourcePath = str_replace(
            '{' . 'store_id' . '}',
            ObjectSerializer::toPathValue($store_id),
            $resourcePath
        );

        // body params
        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json'],
            ['application/json']
        );


        // Basic Authentication
        if (!empty($this->config->getUsername()) && !empty($this->config->getPassword())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        // OAuth Authentication
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?$query" : ''),
            $headers,
            $httpBody
        );
    }

    public function getStoreProduct($store_id, $product_id, $fields = null, $exclude_fields = null)
    {
        return $this->getStoreProductWithHttpInfo($store_id, $product_id, $fields, $exclude_fields);
    }

    public function getStoreProductWithHttpInfo($store_id, $product_id, $fields = null, $exclude_fields = null)
    {
        $request = $this->getStoreProductRequest($store_id, $product_id, $fields, $exclude_fields);

        try {
            $options = $this->createHttpClientOption();
            $response = $this->client->send($request, $options);

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return json_decode($response->getBody()->getContents());

        } catch (ApiException | GuzzleException $e) {
            throw $e->getResponseBody();
        }
    }

    protected function getStoreProductRequest($store_id, $product_id, $fields = null, $exclude_fields = null): Request
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $store_id when calling '
            );
        }
        // verify the required parameter 'product_id' is set
        if ($product_id === null || (is_array($product_id) && count($product_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $product_id when calling '
            );
        }

        $resourcePath = '/ecommerce/stores/{store_id}/products/{product_id}';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        // query params
        if (is_array($fields)) {
            $queryParams['fields'] = ObjectSerializer::serializeCollection($fields, 'csv');
        } else
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if (is_array($exclude_fields)) {
            $queryParams['exclude_fields'] = ObjectSerializer::serializeCollection($exclude_fields, 'csv');
        } else
        if ($exclude_fields !== null) {
            $queryParams['exclude_fields'] = ObjectSerializer::toQueryValue($exclude_fields);
        }

        // path params
        $resourcePath = str_replace(
            '{' . 'store_id' . '}',
            ObjectSerializer::toPathValue($store_id),
            $resourcePath
        );
        // path params
        $resourcePath = str_replace(
            '{' . 'product_id' . '}',
            ObjectSerializer::toPathValue($product_id),
            $resourcePath
        );

        // body params
        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json'],
            ['application/json']
        );


        // Basic Authentication
        if (!empty($this->config->getUsername()) && !empty($this->config->getPassword())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        // OAuth Authentication
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?$query" : ''),
            $headers,
            $httpBody
        );
    }

    public function getProductImages($store_id, $product_id, $fields = null, $exclude_fields = null, $count = '10', $offset = '0')
    {
        return $this->getProductImagesWithHttpInfo($store_id, $product_id, $fields, $exclude_fields, $count, $offset);
    }

    public function getProductImagesWithHttpInfo($store_id, $product_id, $fields = null, $exclude_fields = null, $count = '10', $offset = '0')
    {
        $request = $this->getProductImagesRequest($store_id, $product_id, $fields, $exclude_fields, $count, $offset);

        try {
            $options = $this->createHttpClientOption();
            $response = $this->client->send($request, $options);

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return json_decode($response->getBody()->getContents());

        } catch (ApiException | GuzzleException $e) {
            throw $e->getResponseBody();
        }
    }

    protected function getProductImagesRequest($store_id, $product_id, $fields = null, $exclude_fields = null, $count = '10', $offset = '0'): Request
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $store_id when calling '
            );
        }
        // verify the required parameter 'product_id' is set
        if ($product_id === null || (is_array($product_id) && count($product_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $product_id when calling '
            );
        }
        if ($count !== null && $count > 1000) {
            throw new InvalidArgumentException('invalid value for "$count" when calling EcommerceApi., must be smaller than or equal to 1000.');
        }


        $resourcePath = '/ecommerce/stores/{store_id}/products/{product_id}/images';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        // query params
        if (is_array($fields)) {
            $queryParams['fields'] = ObjectSerializer::serializeCollection($fields, 'csv');
        } else
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if (is_array($exclude_fields)) {
            $queryParams['exclude_fields'] = ObjectSerializer::serializeCollection($exclude_fields, 'csv');
        } else
        if ($exclude_fields !== null) {
            $queryParams['exclude_fields'] = ObjectSerializer::toQueryValue($exclude_fields);
        }
        // query params
        if ($count !== null) {
            $queryParams['count'] = ObjectSerializer::toQueryValue($count);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }

        // path params
        $resourcePath = str_replace(
            '{' . 'store_id' . '}',
            ObjectSerializer::toPathValue($store_id),
            $resourcePath
        );
        // path params
        $resourcePath = str_replace(
            '{' . 'product_id' . '}',
            ObjectSerializer::toPathValue($product_id),
            $resourcePath
        );

        // body params
        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json'],
            ['application/json']
        );


        // Basic Authentication
        if (!empty($this->config->getUsername()) && !empty($this->config->getPassword())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        // OAuth Authentication
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?$query" : ''),
            $headers,
            $httpBody
        );
    }

    public function getProductImage($store_id, $product_id, $image_id, $fields = null, $exclude_fields = null)
    {
        return $this->getProductImageWithHttpInfo($store_id, $product_id, $image_id, $fields, $exclude_fields);
    }

    public function getProductImageWithHttpInfo($store_id, $product_id, $image_id, $fields = null, $exclude_fields = null)
    {
        $request = $this->getProductImageRequest($store_id, $product_id, $image_id, $fields, $exclude_fields);

        try {
            $options = $this->createHttpClientOption();
            $response = $this->client->send($request, $options);

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return json_decode($response->getBody()->getContents());

        } catch (ApiException | GuzzleException $e) {
            throw $e->getResponseBody();
        }
    }

    protected function getProductImageRequest($store_id, $product_id, $image_id, $fields = null, $exclude_fields = null): Request
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $store_id when calling '
            );
        }
        // verify the required parameter 'product_id' is set
        if ($product_id === null || (is_array($product_id) && count($product_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $product_id when calling '
            );
        }
        // verify the required parameter 'image_id' is set
        if ($image_id === null || (is_array($image_id) && count($image_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $image_id when calling '
            );
        }

        $resourcePath = '/ecommerce/stores/{store_id}/products/{product_id}/images/{image_id}';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        // query params
        if (is_array($fields)) {
            $queryParams['fields'] = ObjectSerializer::serializeCollection($fields, 'csv');
        } else
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if (is_array($exclude_fields)) {
            $queryParams['exclude_fields'] = ObjectSerializer::serializeCollection($exclude_fields, 'csv');
        } else
        if ($exclude_fields !== null) {
            $queryParams['exclude_fields'] = ObjectSerializer::toQueryValue($exclude_fields);
        }

        // path params
        $resourcePath = str_replace(
            '{' . 'store_id' . '}',
            ObjectSerializer::toPathValue($store_id),
            $resourcePath
        );
        // path params
        $resourcePath = str_replace(
            '{' . 'product_id' . '}',
            ObjectSerializer::toPathValue($product_id),
            $resourcePath
        );
        // path params
        $resourcePath = str_replace(
            '{' . 'image_id' . '}',
            ObjectSerializer::toPathValue($image_id),
            $resourcePath
        );

        // body params
        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json'],
            ['application/json']
        );


        // Basic Authentication
        if (!empty($this->config->getUsername()) && !empty($this->config->getPassword())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        // OAuth Authentication
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?$query" : ''),
            $headers,
            $httpBody
        );
    }

    public function getProductVariants($store_id, $product_id, $fields = null, $exclude_fields = null, $count = '10', $offset = '0')
    {
        return $this->getProductVariantsWithHttpInfo($store_id, $product_id, $fields, $exclude_fields, $count, $offset);
    }

    public function getProductVariantsWithHttpInfo($store_id, $product_id, $fields = null, $exclude_fields = null, $count = '10', $offset = '0')
    {
        $request = $this->getProductVariantsRequest($store_id, $product_id, $fields, $exclude_fields, $count, $offset);

        try {
            $options = $this->createHttpClientOption();
            $response = $this->client->send($request, $options);

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return json_decode($response->getBody()->getContents());

        } catch (ApiException | GuzzleException $e) {
            throw $e->getResponseBody();
        }
    }

    protected function getProductVariantsRequest($store_id, $product_id, $fields = null, $exclude_fields = null, $count = '10', $offset = '0'): Request
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $store_id when calling '
            );
        }
        // verify the required parameter 'product_id' is set
        if ($product_id === null || (is_array($product_id) && count($product_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $product_id when calling '
            );
        }
        if ($count !== null && $count > 1000) {
            throw new InvalidArgumentException('invalid value for "$count" when calling EcommerceApi., must be smaller than or equal to 1000.');
        }


        $resourcePath = '/ecommerce/stores/{store_id}/products/{product_id}/variants';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        // query params
        if (is_array($fields)) {
            $queryParams['fields'] = ObjectSerializer::serializeCollection($fields, 'csv');
        } else
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if (is_array($exclude_fields)) {
            $queryParams['exclude_fields'] = ObjectSerializer::serializeCollection($exclude_fields, 'csv');
        } else
        if ($exclude_fields !== null) {
            $queryParams['exclude_fields'] = ObjectSerializer::toQueryValue($exclude_fields);
        }
        // query params
        if ($count !== null) {
            $queryParams['count'] = ObjectSerializer::toQueryValue($count);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }

        // path params
        $resourcePath = str_replace(
            '{' . 'store_id' . '}',
            ObjectSerializer::toPathValue($store_id),
            $resourcePath
        );
        // path params
        $resourcePath = str_replace(
            '{' . 'product_id' . '}',
            ObjectSerializer::toPathValue($product_id),
            $resourcePath
        );

        // body params
        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json'],
            ['application/json']
        );


        // Basic Authentication
        if (!empty($this->config->getUsername()) && !empty($this->config->getPassword())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        // OAuth Authentication
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?$query" : ''),
            $headers,
            $httpBody
        );
    }

    public function getProductVariant($store_id, $product_id, $variant_id, $fields = null, $exclude_fields = null)
    {
        return $this->getProductVariantWithHttpInfo($store_id, $product_id, $variant_id, $fields, $exclude_fields);
    }

    public function getProductVariantWithHttpInfo($store_id, $product_id, $variant_id, $fields = null, $exclude_fields = null)
    {
        $request = $this->getProductVariantRequest($store_id, $product_id, $variant_id, $fields, $exclude_fields);

        try {
            $options = $this->createHttpClientOption();
            $response = $this->client->send($request, $options);

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return json_decode($response->getBody()->getContents());

        } catch (ApiException | GuzzleException $e) {
            throw $e->getResponseBody();
        }
    }

    protected function getProductVariantRequest($store_id, $product_id, $variant_id, $fields = null, $exclude_fields = null): Request
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $store_id when calling '
            );
        }
        // verify the required parameter 'product_id' is set
        if ($product_id === null || (is_array($product_id) && count($product_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $product_id when calling '
            );
        }
        // verify the required parameter 'variant_id' is set
        if ($variant_id === null || (is_array($variant_id) && count($variant_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $variant_id when calling '
            );
        }

        $resourcePath = '/ecommerce/stores/{store_id}/products/{product_id}/variants/{variant_id}';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        // query params
        if (is_array($fields)) {
            $queryParams['fields'] = ObjectSerializer::serializeCollection($fields, 'csv');
        } else
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if (is_array($exclude_fields)) {
            $queryParams['exclude_fields'] = ObjectSerializer::serializeCollection($exclude_fields, 'csv');
        } else
        if ($exclude_fields !== null) {
            $queryParams['exclude_fields'] = ObjectSerializer::toQueryValue($exclude_fields);
        }

        // path params
        $resourcePath = str_replace(
            '{' . 'store_id' . '}',
            ObjectSerializer::toPathValue($store_id),
            $resourcePath
        );
        // path params
        $resourcePath = str_replace(
            '{' . 'product_id' . '}',
            ObjectSerializer::toPathValue($product_id),
            $resourcePath
        );
        // path params
        $resourcePath = str_replace(
            '{' . 'variant_id' . '}',
            ObjectSerializer::toPathValue($variant_id),
            $resourcePath
        );

        // body params
        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json'],
            ['application/json']
        );


        // Basic Authentication
        if (!empty($this->config->getUsername()) && !empty($this->config->getPassword())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        // OAuth Authentication
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?$query" : ''),
            $headers,
            $httpBody
        );
    }

    public function getPromoCodes($promo_rule_id, $store_id, $fields = null, $exclude_fields = null, $count = '10', $offset = '0')
    {
        return $this->getPromoCodesWithHttpInfo($promo_rule_id, $store_id, $fields, $exclude_fields, $count, $offset);
    }

    public function getPromoCodesWithHttpInfo($promo_rule_id, $store_id, $fields = null, $exclude_fields = null, $count = '10', $offset = '0')
    {
        $request = $this->getPromoCodesRequest($promo_rule_id, $store_id, $fields, $exclude_fields, $count, $offset);

        try {
            $options = $this->createHttpClientOption();
            $response = $this->client->send($request, $options);

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return json_decode($response->getBody()->getContents());

        } catch (ApiException | GuzzleException $e) {
            throw $e->getResponseBody();
        }
    }

    protected function getPromoCodesRequest($promo_rule_id, $store_id, $fields = null, $exclude_fields = null, $count = '10', $offset = '0'): Request
    {
        // verify the required parameter 'promo_rule_id' is set
        if ($promo_rule_id === null || (is_array($promo_rule_id) && count($promo_rule_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $promo_rule_id when calling '
            );
        }
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $store_id when calling '
            );
        }
        if ($count !== null && $count > 1000) {
            throw new InvalidArgumentException('invalid value for "$count" when calling EcommerceApi., must be smaller than or equal to 1000.');
        }


        $resourcePath = '/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}/promo-codes';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        // query params
        if (is_array($fields)) {
            $queryParams['fields'] = ObjectSerializer::serializeCollection($fields, 'csv');
        } else
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if (is_array($exclude_fields)) {
            $queryParams['exclude_fields'] = ObjectSerializer::serializeCollection($exclude_fields, 'csv');
        } else
        if ($exclude_fields !== null) {
            $queryParams['exclude_fields'] = ObjectSerializer::toQueryValue($exclude_fields);
        }
        // query params
        if ($count !== null) {
            $queryParams['count'] = ObjectSerializer::toQueryValue($count);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }

        // path params
        $resourcePath = str_replace(
            '{' . 'promo_rule_id' . '}',
            ObjectSerializer::toPathValue($promo_rule_id),
            $resourcePath
        );
        // path params
        $resourcePath = str_replace(
            '{' . 'store_id' . '}',
            ObjectSerializer::toPathValue($store_id),
            $resourcePath
        );

        // body params
        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json'],
            ['application/json']
        );


        // Basic Authentication
        if (!empty($this->config->getUsername()) && !empty($this->config->getPassword())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        // OAuth Authentication
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?$query" : ''),
            $headers,
            $httpBody
        );
    }

    public function getPromoCode($store_id, $promo_rule_id, $promo_code_id, $fields = null, $exclude_fields = null)
    {
        return $this->getPromoCodeWithHttpInfo($store_id, $promo_rule_id, $promo_code_id, $fields, $exclude_fields);
    }

    public function getPromoCodeWithHttpInfo($store_id, $promo_rule_id, $promo_code_id, $fields = null, $exclude_fields = null)
    {
        $request = $this->getPromoCodeRequest($store_id, $promo_rule_id, $promo_code_id, $fields, $exclude_fields);

        try {
            $options = $this->createHttpClientOption();
            $response = $this->client->send($request, $options);

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return json_decode($response->getBody()->getContents());

        } catch (ApiException | GuzzleException $e) {
            throw $e->getResponseBody();
        }
    }

    protected function getPromoCodeRequest($store_id, $promo_rule_id, $promo_code_id, $fields = null, $exclude_fields = null): Request
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $store_id when calling '
            );
        }
        // verify the required parameter 'promo_rule_id' is set
        if ($promo_rule_id === null || (is_array($promo_rule_id) && count($promo_rule_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $promo_rule_id when calling '
            );
        }
        // verify the required parameter 'promo_code_id' is set
        if ($promo_code_id === null || (is_array($promo_code_id) && count($promo_code_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $promo_code_id when calling '
            );
        }

        $resourcePath = '/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}/promo-codes/{promo_code_id}';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        // query params
        if (is_array($fields)) {
            $queryParams['fields'] = ObjectSerializer::serializeCollection($fields, 'csv');
        } else
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if (is_array($exclude_fields)) {
            $queryParams['exclude_fields'] = ObjectSerializer::serializeCollection($exclude_fields, 'csv');
        } else
        if ($exclude_fields !== null) {
            $queryParams['exclude_fields'] = ObjectSerializer::toQueryValue($exclude_fields);
        }

        // path params
        $resourcePath = str_replace(
            '{' . 'store_id' . '}',
            ObjectSerializer::toPathValue($store_id),
            $resourcePath
        );
        // path params
        $resourcePath = str_replace(
            '{' . 'promo_rule_id' . '}',
            ObjectSerializer::toPathValue($promo_rule_id),
            $resourcePath
        );
        // path params
        $resourcePath = str_replace(
            '{' . 'promo_code_id' . '}',
            ObjectSerializer::toPathValue($promo_code_id),
            $resourcePath
        );

        // body params
        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json'],
            ['application/json']
        );


        // Basic Authentication
        if (!empty($this->config->getUsername()) && !empty($this->config->getPassword())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        // OAuth Authentication
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?$query" : ''),
            $headers,
            $httpBody
        );
    }

    public function listPromoRules($store_id, $fields = null, $exclude_fields = null, $count = '10', $offset = '0')
    {
        return $this->listPromoRulesWithHttpInfo($store_id, $fields, $exclude_fields, $count, $offset);
    }

    public function listPromoRulesWithHttpInfo($store_id, $fields = null, $exclude_fields = null, $count = '10', $offset = '0')
    {
        $request = $this->listPromoRulesRequest($store_id, $fields, $exclude_fields, $count, $offset);

        try {
            $options = $this->createHttpClientOption();
            $response = $this->client->send($request, $options);

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return json_decode($response->getBody()->getContents());

        } catch (ApiException | GuzzleException $e) {
            throw $e->getResponseBody();
        }
    }

    protected function listPromoRulesRequest($store_id, $fields = null, $exclude_fields = null, $count = '10', $offset = '0'): Request
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $store_id when calling '
            );
        }
        if ($count !== null && $count > 1000) {
            throw new InvalidArgumentException('invalid value for "$count" when calling EcommerceApi., must be smaller than or equal to 1000.');
        }


        $resourcePath = '/ecommerce/stores/{store_id}/promo-rules';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        // query params
        if (is_array($fields)) {
            $queryParams['fields'] = ObjectSerializer::serializeCollection($fields, 'csv');
        } else
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if (is_array($exclude_fields)) {
            $queryParams['exclude_fields'] = ObjectSerializer::serializeCollection($exclude_fields, 'csv');
        } else
        if ($exclude_fields !== null) {
            $queryParams['exclude_fields'] = ObjectSerializer::toQueryValue($exclude_fields);
        }
        // query params
        if ($count !== null) {
            $queryParams['count'] = ObjectSerializer::toQueryValue($count);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }

        // path params
        $resourcePath = str_replace(
            '{' . 'store_id' . '}',
            ObjectSerializer::toPathValue($store_id),
            $resourcePath
        );

        // body params
        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json'],
            ['application/json']
        );


        // Basic Authentication
        if (!empty($this->config->getUsername()) && !empty($this->config->getPassword())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        // OAuth Authentication
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?$query" : ''),
            $headers,
            $httpBody
        );
    }

    public function getPromoRule($store_id, $promo_rule_id, $fields = null, $exclude_fields = null)
    {
        return $this->getPromoRuleWithHttpInfo($store_id, $promo_rule_id, $fields, $exclude_fields);
    }

    public function getPromoRuleWithHttpInfo($store_id, $promo_rule_id, $fields = null, $exclude_fields = null)
    {
        $request = $this->getPromoRuleRequest($store_id, $promo_rule_id, $fields, $exclude_fields);

        try {
            $options = $this->createHttpClientOption();
            $response = $this->client->send($request, $options);

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return json_decode($response->getBody()->getContents());

        } catch (ApiException | GuzzleException $e) {
            throw $e->getResponseBody();
        }
    }

    protected function getPromoRuleRequest($store_id, $promo_rule_id, $fields = null, $exclude_fields = null): Request
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $store_id when calling '
            );
        }
        // verify the required parameter 'promo_rule_id' is set
        if ($promo_rule_id === null || (is_array($promo_rule_id) && count($promo_rule_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $promo_rule_id when calling '
            );
        }

        $resourcePath = '/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        // query params
        if (is_array($fields)) {
            $queryParams['fields'] = ObjectSerializer::serializeCollection($fields, 'csv');
        } else
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if (is_array($exclude_fields)) {
            $queryParams['exclude_fields'] = ObjectSerializer::serializeCollection($exclude_fields, 'csv');
        } else
        if ($exclude_fields !== null) {
            $queryParams['exclude_fields'] = ObjectSerializer::toQueryValue($exclude_fields);
        }

        // path params
        $resourcePath = str_replace(
            '{' . 'store_id' . '}',
            ObjectSerializer::toPathValue($store_id),
            $resourcePath
        );
        // path params
        $resourcePath = str_replace(
            '{' . 'promo_rule_id' . '}',
            ObjectSerializer::toPathValue($promo_rule_id),
            $resourcePath
        );

        // body params
        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json'],
            ['application/json']
        );


        // Basic Authentication
        if (!empty($this->config->getUsername()) && !empty($this->config->getPassword())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        // OAuth Authentication
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?$query" : ''),
            $headers,
            $httpBody
        );
    }

    public function updateStore($store_id, $body)
    {
        return $this->updateStoreWithHttpInfo($store_id, $body);
    }

    public function updateStoreWithHttpInfo($store_id, $body)
    {
        $request = $this->updateStoreRequest($store_id, $body);

        try {
            $options = $this->createHttpClientOption();
            $response = $this->client->send($request, $options);

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return json_decode($response->getBody()->getContents());

        } catch (ApiException | GuzzleException $e) {
            throw $e->getResponseBody();
        }
    }

    protected function updateStoreRequest($store_id, $body): Request
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $store_id when calling '
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $body when calling '
            );
        }

        $resourcePath = '/ecommerce/stores/{store_id}';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // path params
        $resourcePath = str_replace(
            '{' . 'store_id' . '}',
            ObjectSerializer::toPathValue($store_id),
            $resourcePath
        );

        // body params
        $_tempBody = $body ?? null;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json'],
            ['application/json']
        );

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                if ($httpBody instanceof stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                if (is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        }


        // Basic Authentication
        if (!empty($this->config->getUsername()) && !empty($this->config->getPassword())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        // OAuth Authentication
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?$query" : ''),
            $headers,
            $httpBody
        );
    }

    public function updateStoreCart($store_id, $cart_id, $body)
    {
        return $this->updateStoreCartWithHttpInfo($store_id, $cart_id, $body);
    }

    public function updateStoreCartWithHttpInfo($store_id, $cart_id, $body)
    {
        $request = $this->updateStoreCartRequest($store_id, $cart_id, $body);

        try {
            $options = $this->createHttpClientOption();
            $response = $this->client->send($request, $options);

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return json_decode($response->getBody()->getContents());

        } catch (ApiException | GuzzleException $e) {
            throw $e->getResponseBody();
        }
    }

    protected function updateStoreCartRequest($store_id, $cart_id, $body): Request
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $store_id when calling '
            );
        }
        // verify the required parameter 'cart_id' is set
        if ($cart_id === null || (is_array($cart_id) && count($cart_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $cart_id when calling '
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $body when calling '
            );
        }

        $resourcePath = '/ecommerce/stores/{store_id}/carts/{cart_id}';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // path params
        $resourcePath = str_replace(
            '{' . 'store_id' . '}',
            ObjectSerializer::toPathValue($store_id),
            $resourcePath
        );
        // path params
        $resourcePath = str_replace(
            '{' . 'cart_id' . '}',
            ObjectSerializer::toPathValue($cart_id),
            $resourcePath
        );

        // body params
        $_tempBody = $body ?? null;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json'],
            ['application/json']
        );

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                if ($httpBody instanceof stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                if (is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        }


        // Basic Authentication
        if (!empty($this->config->getUsername()) && !empty($this->config->getPassword())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        // OAuth Authentication
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?$query" : ''),
            $headers,
            $httpBody
        );
    }

    public function updateCartLineItem($store_id, $cart_id, $line_id, $body)
    {
        return $this->updateCartLineItemWithHttpInfo($store_id, $cart_id, $line_id, $body);
    }

    public function updateCartLineItemWithHttpInfo($store_id, $cart_id, $line_id, $body)
    {
        $request = $this->updateCartLineItemRequest($store_id, $cart_id, $line_id, $body);

        try {
            $options = $this->createHttpClientOption();
            $response = $this->client->send($request, $options);

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return json_decode($response->getBody()->getContents());

        } catch (ApiException | GuzzleException $e) {
            throw $e->getResponseBody();
        }
    }

    protected function updateCartLineItemRequest($store_id, $cart_id, $line_id, $body): Request
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $store_id when calling '
            );
        }
        // verify the required parameter 'cart_id' is set
        if ($cart_id === null || (is_array($cart_id) && count($cart_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $cart_id when calling '
            );
        }
        // verify the required parameter 'line_id' is set
        if ($line_id === null || (is_array($line_id) && count($line_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $line_id when calling '
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $body when calling '
            );
        }

        $resourcePath = '/ecommerce/stores/{store_id}/carts/{cart_id}/lines/{line_id}';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // path params
        $resourcePath = str_replace(
            '{' . 'store_id' . '}',
            ObjectSerializer::toPathValue($store_id),
            $resourcePath
        );
        // path params
        $resourcePath = str_replace(
            '{' . 'cart_id' . '}',
            ObjectSerializer::toPathValue($cart_id),
            $resourcePath
        );
        // path params
        $resourcePath = str_replace(
            '{' . 'line_id' . '}',
            ObjectSerializer::toPathValue($line_id),
            $resourcePath
        );

        // body params
        $_tempBody = $body ?? null;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json'],
            ['application/json']
        );

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                if ($httpBody instanceof stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                if (is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        }


        // Basic Authentication
        if (!empty($this->config->getUsername()) && !empty($this->config->getPassword())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        // OAuth Authentication
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?$query" : ''),
            $headers,
            $httpBody
        );
    }

    public function updateStoreCustomer($store_id, $customer_id, $body)
    {
        return $this->updateStoreCustomerWithHttpInfo($store_id, $customer_id, $body);
    }

    public function updateStoreCustomerWithHttpInfo($store_id, $customer_id, $body)
    {
        $request = $this->updateStoreCustomerRequest($store_id, $customer_id, $body);

        try {
            $options = $this->createHttpClientOption();
            $response = $this->client->send($request, $options);

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return json_decode($response->getBody()->getContents());

        } catch (ApiException | GuzzleException $e) {
            throw $e->getResponseBody();
        }
    }

    protected function updateStoreCustomerRequest($store_id, $customer_id, $body): Request
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $store_id when calling '
            );
        }
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null || (is_array($customer_id) && count($customer_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $customer_id when calling '
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $body when calling '
            );
        }

        $resourcePath = '/ecommerce/stores/{store_id}/customers/{customer_id}';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // path params
        $resourcePath = str_replace(
            '{' . 'store_id' . '}',
            ObjectSerializer::toPathValue($store_id),
            $resourcePath
        );
        // path params
        $resourcePath = str_replace(
            '{' . 'customer_id' . '}',
            ObjectSerializer::toPathValue($customer_id),
            $resourcePath
        );

        // body params
        $_tempBody = $body ?? null;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json'],
            ['application/json']
        );

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                if ($httpBody instanceof stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                if (is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        }


        // Basic Authentication
        if (!empty($this->config->getUsername()) && !empty($this->config->getPassword())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        // OAuth Authentication
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?$query" : ''),
            $headers,
            $httpBody
        );
    }

    public function updateOrder($store_id, $order_id, $body)
    {
        return $this->updateOrderWithHttpInfo($store_id, $order_id, $body);
    }

    public function updateOrderWithHttpInfo($store_id, $order_id, $body)
    {
        $request = $this->updateOrderRequest($store_id, $order_id, $body);

        try {
            $options = $this->createHttpClientOption();
            $response = $this->client->send($request, $options);

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return json_decode($response->getBody()->getContents());

        } catch (ApiException | GuzzleException $e) {
            throw $e->getResponseBody();
        }
    }

    protected function updateOrderRequest($store_id, $order_id, $body): Request
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $store_id when calling '
            );
        }
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order_id when calling '
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $body when calling '
            );
        }

        $resourcePath = '/ecommerce/stores/{store_id}/orders/{order_id}';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // path params
        $resourcePath = str_replace(
            '{' . 'store_id' . '}',
            ObjectSerializer::toPathValue($store_id),
            $resourcePath
        );
        // path params
        $resourcePath = str_replace(
            '{' . 'order_id' . '}',
            ObjectSerializer::toPathValue($order_id),
            $resourcePath
        );

        // body params
        $_tempBody = $body ?? null;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json'],
            ['application/json']
        );

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                if ($httpBody instanceof stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                if (is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        }


        // Basic Authentication
        if (!empty($this->config->getUsername()) && !empty($this->config->getPassword())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        // OAuth Authentication
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?$query" : ''),
            $headers,
            $httpBody
        );
    }

    public function updateOrderLineItem($store_id, $order_id, $line_id, $body)
    {
        return $this->updateOrderLineItemWithHttpInfo($store_id, $order_id, $line_id, $body);
    }

    public function updateOrderLineItemWithHttpInfo($store_id, $order_id, $line_id, $body)
    {
        $request = $this->updateOrderLineItemRequest($store_id, $order_id, $line_id, $body);

        try {
            $options = $this->createHttpClientOption();
            $response = $this->client->send($request, $options);

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return json_decode($response->getBody()->getContents());

        } catch (ApiException | GuzzleException $e) {
            throw $e->getResponseBody();
        }
    }

    protected function updateOrderLineItemRequest($store_id, $order_id, $line_id, $body): Request
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $store_id when calling '
            );
        }
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order_id when calling '
            );
        }
        // verify the required parameter 'line_id' is set
        if ($line_id === null || (is_array($line_id) && count($line_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $line_id when calling '
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $body when calling '
            );
        }

        $resourcePath = '/ecommerce/stores/{store_id}/orders/{order_id}/lines/{line_id}';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // path params
        $resourcePath = str_replace(
            '{' . 'store_id' . '}',
            ObjectSerializer::toPathValue($store_id),
            $resourcePath
        );
        // path params
        $resourcePath = str_replace(
            '{' . 'order_id' . '}',
            ObjectSerializer::toPathValue($order_id),
            $resourcePath
        );
        // path params
        $resourcePath = str_replace(
            '{' . 'line_id' . '}',
            ObjectSerializer::toPathValue($line_id),
            $resourcePath
        );

        // body params
        $_tempBody = $body ?? null;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json'],
            ['application/json']
        );

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                if ($httpBody instanceof stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                if (is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        }


        // Basic Authentication
        if (!empty($this->config->getUsername()) && !empty($this->config->getPassword())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        // OAuth Authentication
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?$query" : ''),
            $headers,
            $httpBody
        );
    }

    public function updateStoreProduct($store_id, $product_id, $body)
    {
        return $this->updateStoreProductWithHttpInfo($store_id, $product_id, $body);
    }

    public function updateStoreProductWithHttpInfo($store_id, $product_id, $body)
    {
        $request = $this->updateStoreProductRequest($store_id, $product_id, $body);

        try {
            $options = $this->createHttpClientOption();
            $response = $this->client->send($request, $options);

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return json_decode($response->getBody()->getContents());

        } catch (ApiException | GuzzleException $e) {
            throw $e->getResponseBody();
        }
    }

    protected function updateStoreProductRequest($store_id, $product_id, $body): Request
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $store_id when calling '
            );
        }
        // verify the required parameter 'product_id' is set
        if ($product_id === null || (is_array($product_id) && count($product_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $product_id when calling '
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $body when calling '
            );
        }

        $resourcePath = '/ecommerce/stores/{store_id}/products/{product_id}';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // path params
        $resourcePath = str_replace(
            '{' . 'store_id' . '}',
            ObjectSerializer::toPathValue($store_id),
            $resourcePath
        );
        // path params
        $resourcePath = str_replace(
            '{' . 'product_id' . '}',
            ObjectSerializer::toPathValue($product_id),
            $resourcePath
        );

        // body params
        $_tempBody = $body ?? null;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json'],
            ['application/json']
        );

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                if ($httpBody instanceof stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                if (is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        }


        // Basic Authentication
        if (!empty($this->config->getUsername()) && !empty($this->config->getPassword())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        // OAuth Authentication
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?$query" : ''),
            $headers,
            $httpBody
        );
    }

    public function updateProductImage($store_id, $product_id, $image_id, $body)
    {
        return $this->updateProductImageWithHttpInfo($store_id, $product_id, $image_id, $body);
    }

    public function updateProductImageWithHttpInfo($store_id, $product_id, $image_id, $body)
    {
        $request = $this->updateProductImageRequest($store_id, $product_id, $image_id, $body);

        try {
            $options = $this->createHttpClientOption();
            $response = $this->client->send($request, $options);

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return json_decode($response->getBody()->getContents());

        } catch (ApiException | GuzzleException $e) {
            throw $e->getResponseBody();
        }
    }

    protected function updateProductImageRequest($store_id, $product_id, $image_id, $body): Request
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $store_id when calling '
            );
        }
        // verify the required parameter 'product_id' is set
        if ($product_id === null || (is_array($product_id) && count($product_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $product_id when calling '
            );
        }
        // verify the required parameter 'image_id' is set
        if ($image_id === null || (is_array($image_id) && count($image_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $image_id when calling '
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $body when calling '
            );
        }

        $resourcePath = '/ecommerce/stores/{store_id}/products/{product_id}/images/{image_id}';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // path params
        $resourcePath = str_replace(
            '{' . 'store_id' . '}',
            ObjectSerializer::toPathValue($store_id),
            $resourcePath
        );
        // path params
        $resourcePath = str_replace(
            '{' . 'product_id' . '}',
            ObjectSerializer::toPathValue($product_id),
            $resourcePath
        );
        // path params
        $resourcePath = str_replace(
            '{' . 'image_id' . '}',
            ObjectSerializer::toPathValue($image_id),
            $resourcePath
        );

        // body params
        $_tempBody = $body ?? null;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json'],
            ['application/json']
        );

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                if ($httpBody instanceof stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                if (is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        }


        // Basic Authentication
        if (!empty($this->config->getUsername()) && !empty($this->config->getPassword())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        // OAuth Authentication
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?$query" : ''),
            $headers,
            $httpBody
        );
    }

    public function updateProductVariant($store_id, $product_id, $variant_id, $body)
    {
        return $this->updateProductVariantWithHttpInfo($store_id, $product_id, $variant_id, $body);
    }

    public function updateProductVariantWithHttpInfo($store_id, $product_id, $variant_id, $body)
    {
        $request = $this->updateProductVariantRequest($store_id, $product_id, $variant_id, $body);

        try {
            $options = $this->createHttpClientOption();
            $response = $this->client->send($request, $options);

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return json_decode($response->getBody()->getContents());

        } catch (ApiException | GuzzleException $e) {
            throw $e->getResponseBody();
        }
    }

    protected function updateProductVariantRequest($store_id, $product_id, $variant_id, $body): Request
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $store_id when calling '
            );
        }
        // verify the required parameter 'product_id' is set
        if ($product_id === null || (is_array($product_id) && count($product_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $product_id when calling '
            );
        }
        // verify the required parameter 'variant_id' is set
        if ($variant_id === null || (is_array($variant_id) && count($variant_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $variant_id when calling '
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $body when calling '
            );
        }

        $resourcePath = '/ecommerce/stores/{store_id}/products/{product_id}/variants/{variant_id}';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // path params
        $resourcePath = str_replace(
            '{' . 'store_id' . '}',
            ObjectSerializer::toPathValue($store_id),
            $resourcePath
        );
        // path params
        $resourcePath = str_replace(
            '{' . 'product_id' . '}',
            ObjectSerializer::toPathValue($product_id),
            $resourcePath
        );
        // path params
        $resourcePath = str_replace(
            '{' . 'variant_id' . '}',
            ObjectSerializer::toPathValue($variant_id),
            $resourcePath
        );

        // body params
        $_tempBody = $body ?? null;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json'],
            ['application/json']
        );

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                if ($httpBody instanceof stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                if (is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        }


        // Basic Authentication
        if (!empty($this->config->getUsername()) && !empty($this->config->getPassword())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        // OAuth Authentication
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?$query" : ''),
            $headers,
            $httpBody
        );
    }

    public function updatePromoCode($store_id, $promo_rule_id, $promo_code_id, $body)
    {
        return $this->updatePromoCodeWithHttpInfo($store_id, $promo_rule_id, $promo_code_id, $body);
    }

    public function updatePromoCodeWithHttpInfo($store_id, $promo_rule_id, $promo_code_id, $body)
    {
        $request = $this->updatePromoCodeRequest($store_id, $promo_rule_id, $promo_code_id, $body);

        try {
            $options = $this->createHttpClientOption();
            $response = $this->client->send($request, $options);

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return json_decode($response->getBody()->getContents());

        } catch (ApiException | GuzzleException $e) {
            throw $e->getResponseBody();
        }
    }

    protected function updatePromoCodeRequest($store_id, $promo_rule_id, $promo_code_id, $body): Request
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $store_id when calling '
            );
        }
        // verify the required parameter 'promo_rule_id' is set
        if ($promo_rule_id === null || (is_array($promo_rule_id) && count($promo_rule_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $promo_rule_id when calling '
            );
        }
        // verify the required parameter 'promo_code_id' is set
        if ($promo_code_id === null || (is_array($promo_code_id) && count($promo_code_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $promo_code_id when calling '
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $body when calling '
            );
        }

        $resourcePath = '/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}/promo-codes/{promo_code_id}';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // path params
        $resourcePath = str_replace(
            '{' . 'store_id' . '}',
            ObjectSerializer::toPathValue($store_id),
            $resourcePath
        );
        // path params
        $resourcePath = str_replace(
            '{' . 'promo_rule_id' . '}',
            ObjectSerializer::toPathValue($promo_rule_id),
            $resourcePath
        );
        // path params
        $resourcePath = str_replace(
            '{' . 'promo_code_id' . '}',
            ObjectSerializer::toPathValue($promo_code_id),
            $resourcePath
        );

        // body params
        $_tempBody = $body ?? null;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json'],
            ['application/json']
        );

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                if ($httpBody instanceof stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                if (is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        }


        // Basic Authentication
        if (!empty($this->config->getUsername()) && !empty($this->config->getPassword())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        // OAuth Authentication
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?$query" : ''),
            $headers,
            $httpBody
        );
    }

    public function updatePromoRule($store_id, $promo_rule_id, $body)
    {
        return $this->updatePromoRuleWithHttpInfo($store_id, $promo_rule_id, $body);
    }

    public function updatePromoRuleWithHttpInfo($store_id, $promo_rule_id, $body)
    {
        $request = $this->updatePromoRuleRequest($store_id, $promo_rule_id, $body);

        try {
            $options = $this->createHttpClientOption();
            $response = $this->client->send($request, $options);

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return json_decode($response->getBody()->getContents());

        } catch (ApiException | GuzzleException $e) {
            throw $e->getResponseBody();
        }
    }

    protected function updatePromoRuleRequest($store_id, $promo_rule_id, $body): Request
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $store_id when calling '
            );
        }
        // verify the required parameter 'promo_rule_id' is set
        if ($promo_rule_id === null || (is_array($promo_rule_id) && count($promo_rule_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $promo_rule_id when calling '
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $body when calling '
            );
        }

        $resourcePath = '/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // path params
        $resourcePath = str_replace(
            '{' . 'store_id' . '}',
            ObjectSerializer::toPathValue($store_id),
            $resourcePath
        );
        // path params
        $resourcePath = str_replace(
            '{' . 'promo_rule_id' . '}',
            ObjectSerializer::toPathValue($promo_rule_id),
            $resourcePath
        );

        // body params
        $_tempBody = $body ?? null;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json'],
            ['application/json']
        );

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                if ($httpBody instanceof stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                if (is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        }


        // Basic Authentication
        if (!empty($this->config->getUsername()) && !empty($this->config->getPassword())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        // OAuth Authentication
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?$query" : ''),
            $headers,
            $httpBody
        );
    }

    public function addStore($body)
    {
        return $this->addStoreWithHttpInfo($body);
    }

    public function addStoreWithHttpInfo($body)
    {
        $request = $this->addStoreRequest($body);

        try {
            $options = $this->createHttpClientOption();
            $response = $this->client->send($request, $options);

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return json_decode($response->getBody()->getContents());

        } catch (ApiException | GuzzleException $e) {
            throw $e->getResponseBody();
        }
    }

    protected function addStoreRequest($body): Request
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $body when calling '
            );
        }

        $resourcePath = '/ecommerce/stores';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';


        // body params
        $_tempBody = $body ?? null;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json'],
            ['application/json']
        );

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                if ($httpBody instanceof stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                if (is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        }


        // Basic Authentication
        if (!empty($this->config->getUsername()) && !empty($this->config->getPassword())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        // OAuth Authentication
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?$query" : ''),
            $headers,
            $httpBody
        );
    }

    public function addStoreCart($store_id, $body)
    {
        return $this->addStoreCartWithHttpInfo($store_id, $body);
    }

    public function addStoreCartWithHttpInfo($store_id, $body)
    {
        $request = $this->addStoreCartRequest($store_id, $body);

        try {
            $options = $this->createHttpClientOption();
            $response = $this->client->send($request, $options);

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return json_decode($response->getBody()->getContents());

        } catch (ApiException | GuzzleException $e) {
            throw $e->getResponseBody();
        }
    }

    protected function addStoreCartRequest($store_id, $body): Request
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $store_id when calling '
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $body when calling '
            );
        }

        $resourcePath = '/ecommerce/stores/{store_id}/carts';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // path params
        $resourcePath = str_replace(
            '{' . 'store_id' . '}',
            ObjectSerializer::toPathValue($store_id),
            $resourcePath
        );

        // body params
        $_tempBody = $body ?? null;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json'],
            ['application/json']
        );

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                if ($httpBody instanceof stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                if (is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        }


        // Basic Authentication
        if (!empty($this->config->getUsername()) && !empty($this->config->getPassword())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        // OAuth Authentication
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?$query" : ''),
            $headers,
            $httpBody
        );
    }

    public function addCartLineItem($store_id, $cart_id, $body)
    {
        return $this->addCartLineItemWithHttpInfo($store_id, $cart_id, $body);
    }

    public function addCartLineItemWithHttpInfo($store_id, $cart_id, $body)
    {
        $request = $this->addCartLineItemRequest($store_id, $cart_id, $body);

        try {
            $options = $this->createHttpClientOption();
            $response = $this->client->send($request, $options);

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return json_decode($response->getBody()->getContents());

        } catch (ApiException | GuzzleException $e) {
            throw $e->getResponseBody();
        }
    }

    protected function addCartLineItemRequest($store_id, $cart_id, $body): Request
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $store_id when calling '
            );
        }
        // verify the required parameter 'cart_id' is set
        if ($cart_id === null || (is_array($cart_id) && count($cart_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $cart_id when calling '
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $body when calling '
            );
        }

        $resourcePath = '/ecommerce/stores/{store_id}/carts/{cart_id}/lines';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // path params
        $resourcePath = str_replace(
            '{' . 'store_id' . '}',
            ObjectSerializer::toPathValue($store_id),
            $resourcePath
        );
        // path params
        $resourcePath = str_replace(
            '{' . 'cart_id' . '}',
            ObjectSerializer::toPathValue($cart_id),
            $resourcePath
        );

        // body params
        $_tempBody = $body ?? null;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json'],
            ['application/json']
        );

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                if ($httpBody instanceof stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                if (is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        }


        // Basic Authentication
        if (!empty($this->config->getUsername()) && !empty($this->config->getPassword())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        // OAuth Authentication
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?$query" : ''),
            $headers,
            $httpBody
        );
    }

    public function addStoreCustomer($store_id, $body)
    {
        return $this->addStoreCustomerWithHttpInfo($store_id, $body);
    }

    public function addStoreCustomerWithHttpInfo($store_id, $body)
    {
        $request = $this->addStoreCustomerRequest($store_id, $body);

        try {
            $options = $this->createHttpClientOption();
            $response = $this->client->send($request, $options);

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return json_decode($response->getBody()->getContents());

        } catch (ApiException | GuzzleException $e) {
            throw $e->getResponseBody();
        }
    }

    protected function addStoreCustomerRequest($store_id, $body): Request
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $store_id when calling '
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $body when calling '
            );
        }

        $resourcePath = '/ecommerce/stores/{store_id}/customers';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // path params
        $resourcePath = str_replace(
            '{' . 'store_id' . '}',
            ObjectSerializer::toPathValue($store_id),
            $resourcePath
        );

        // body params
        $_tempBody = $body ?? null;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json'],
            ['application/json']
        );

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                if ($httpBody instanceof stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                if (is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        }


        // Basic Authentication
        if (!empty($this->config->getUsername()) && !empty($this->config->getPassword())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        // OAuth Authentication
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?$query" : ''),
            $headers,
            $httpBody
        );
    }

    public function addStoreOrder($store_id, $body)
    {
        return $this->addStoreOrderWithHttpInfo($store_id, $body);
    }

    public function addStoreOrderWithHttpInfo($store_id, $body)
    {
        $request = $this->addStoreOrderRequest($store_id, $body);

        try {
            $options = $this->createHttpClientOption();
            $response = $this->client->send($request, $options);

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return json_decode($response->getBody()->getContents());

        } catch (ApiException | GuzzleException $e) {
            throw $e->getResponseBody();
        }
    }

    protected function addStoreOrderRequest($store_id, $body): Request
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $store_id when calling '
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $body when calling '
            );
        }

        $resourcePath = '/ecommerce/stores/{store_id}/orders';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // path params
        $resourcePath = str_replace(
            '{' . 'store_id' . '}',
            ObjectSerializer::toPathValue($store_id),
            $resourcePath
        );

        // body params
        $_tempBody = $body ?? null;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json'],
            ['application/json']
        );

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                if ($httpBody instanceof stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                if (is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        }


        // Basic Authentication
        if (!empty($this->config->getUsername()) && !empty($this->config->getPassword())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        // OAuth Authentication
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?$query" : ''),
            $headers,
            $httpBody
        );
    }

    public function addOrderLineItem($store_id, $order_id, $body)
    {
        return $this->addOrderLineItemWithHttpInfo($store_id, $order_id, $body);
    }

    public function addOrderLineItemWithHttpInfo($store_id, $order_id, $body)
    {
        $request = $this->addOrderLineItemRequest($store_id, $order_id, $body);

        try {
            $options = $this->createHttpClientOption();
            $response = $this->client->send($request, $options);

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return json_decode($response->getBody()->getContents());

        } catch (ApiException | GuzzleException $e) {
            throw $e->getResponseBody();
        }
    }

    protected function addOrderLineItemRequest($store_id, $order_id, $body): Request
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $store_id when calling '
            );
        }
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order_id when calling '
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $body when calling '
            );
        }

        $resourcePath = '/ecommerce/stores/{store_id}/orders/{order_id}/lines';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // path params
        $resourcePath = str_replace(
            '{' . 'store_id' . '}',
            ObjectSerializer::toPathValue($store_id),
            $resourcePath
        );
        // path params
        $resourcePath = str_replace(
            '{' . 'order_id' . '}',
            ObjectSerializer::toPathValue($order_id),
            $resourcePath
        );

        // body params
        $_tempBody = $body ?? null;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json'],
            ['application/json']
        );

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                if ($httpBody instanceof stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                if (is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        }


        // Basic Authentication
        if (!empty($this->config->getUsername()) && !empty($this->config->getPassword())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        // OAuth Authentication
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?$query" : ''),
            $headers,
            $httpBody
        );
    }

    public function addStoreProduct($store_id, $body)
    {
        return $this->addStoreProductWithHttpInfo($store_id, $body);
    }

    public function addStoreProductWithHttpInfo($store_id, $body)
    {
        $request = $this->addStoreProductRequest($store_id, $body);

        try {
            $options = $this->createHttpClientOption();
            $response = $this->client->send($request, $options);

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return json_decode($response->getBody()->getContents());

        } catch (ApiException | GuzzleException $e) {
            throw $e->getResponseBody();
        }
    }

    protected function addStoreProductRequest($store_id, $body): Request
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $store_id when calling '
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $body when calling '
            );
        }

        $resourcePath = '/ecommerce/stores/{store_id}/products';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // path params
        $resourcePath = str_replace(
            '{' . 'store_id' . '}',
            ObjectSerializer::toPathValue($store_id),
            $resourcePath
        );

        // body params
        $_tempBody = $body ?? null;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json'],
            ['application/json']
        );

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                if ($httpBody instanceof stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                if (is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        }


        // Basic Authentication
        if (!empty($this->config->getUsername()) && !empty($this->config->getPassword())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        // OAuth Authentication
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?$query" : ''),
            $headers,
            $httpBody
        );
    }

    public function addProductImage($store_id, $product_id, $body)
    {
        return $this->addProductImageWithHttpInfo($store_id, $product_id, $body);
    }

    public function addProductImageWithHttpInfo($store_id, $product_id, $body)
    {
        $request = $this->addProductImageRequest($store_id, $product_id, $body);

        try {
            $options = $this->createHttpClientOption();
            $response = $this->client->send($request, $options);

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return json_decode($response->getBody()->getContents());

        } catch (ApiException | GuzzleException $e) {
            throw $e->getResponseBody();
        }
    }

    protected function addProductImageRequest($store_id, $product_id, $body): Request
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $store_id when calling '
            );
        }
        // verify the required parameter 'product_id' is set
        if ($product_id === null || (is_array($product_id) && count($product_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $product_id when calling '
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $body when calling '
            );
        }

        $resourcePath = '/ecommerce/stores/{store_id}/products/{product_id}/images';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // path params
        $resourcePath = str_replace(
            '{' . 'store_id' . '}',
            ObjectSerializer::toPathValue($store_id),
            $resourcePath
        );
        // path params
        $resourcePath = str_replace(
            '{' . 'product_id' . '}',
            ObjectSerializer::toPathValue($product_id),
            $resourcePath
        );

        // body params
        $_tempBody = $body ?? null;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json'],
            ['application/json']
        );

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                if ($httpBody instanceof stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                if (is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        }


        // Basic Authentication
        if (!empty($this->config->getUsername()) && !empty($this->config->getPassword())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        // OAuth Authentication
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?$query" : ''),
            $headers,
            $httpBody
        );
    }

    public function addProductVariants($store_id, $product_id, $body)
    {
        return $this->addProductVariantsWithHttpInfo($store_id, $product_id, $body);
    }

    public function addProductVariantsWithHttpInfo($store_id, $product_id, $body)
    {
        $request = $this->addProductVariantsRequest($store_id, $product_id, $body);

        try {
            $options = $this->createHttpClientOption();
            $response = $this->client->send($request, $options);

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return json_decode($response->getBody()->getContents());

        } catch (ApiException | GuzzleException $e) {
            throw $e->getResponseBody();
        }
    }

    protected function addProductVariantsRequest($store_id, $product_id, $body): Request
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $store_id when calling '
            );
        }
        // verify the required parameter 'product_id' is set
        if ($product_id === null || (is_array($product_id) && count($product_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $product_id when calling '
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $body when calling '
            );
        }

        $resourcePath = '/ecommerce/stores/{store_id}/products/{product_id}/variants';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // path params
        $resourcePath = str_replace(
            '{' . 'store_id' . '}',
            ObjectSerializer::toPathValue($store_id),
            $resourcePath
        );
        // path params
        $resourcePath = str_replace(
            '{' . 'product_id' . '}',
            ObjectSerializer::toPathValue($product_id),
            $resourcePath
        );

        // body params
        $_tempBody = $body ?? null;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json'],
            ['application/json']
        );

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                if ($httpBody instanceof stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                if (is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        }


        // Basic Authentication
        if (!empty($this->config->getUsername()) && !empty($this->config->getPassword())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        // OAuth Authentication
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?$query" : ''),
            $headers,
            $httpBody
        );
    }

    public function addPromoCode($store_id, $promo_rule_id, $body)
    {
        return $this->addPromoCodeWithHttpInfo($store_id, $promo_rule_id, $body);
    }

    public function addPromoCodeWithHttpInfo($store_id, $promo_rule_id, $body)
    {
        $request = $this->addPromoCodeRequest($store_id, $promo_rule_id, $body);

        try {
            $options = $this->createHttpClientOption();
            $response = $this->client->send($request, $options);

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return json_decode($response->getBody()->getContents());

        } catch (ApiException | GuzzleException $e) {
            throw $e->getResponseBody();
        }
    }

    protected function addPromoCodeRequest($store_id, $promo_rule_id, $body): Request
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $store_id when calling '
            );
        }
        // verify the required parameter 'promo_rule_id' is set
        if ($promo_rule_id === null || (is_array($promo_rule_id) && count($promo_rule_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $promo_rule_id when calling '
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $body when calling '
            );
        }

        $resourcePath = '/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}/promo-codes';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // path params
        $resourcePath = str_replace(
            '{' . 'store_id' . '}',
            ObjectSerializer::toPathValue($store_id),
            $resourcePath
        );
        // path params
        $resourcePath = str_replace(
            '{' . 'promo_rule_id' . '}',
            ObjectSerializer::toPathValue($promo_rule_id),
            $resourcePath
        );

        // body params
        $_tempBody = $body ?? null;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json'],
            ['application/json']
        );

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                if ($httpBody instanceof stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                if (is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        }


        // Basic Authentication
        if (!empty($this->config->getUsername()) && !empty($this->config->getPassword())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        // OAuth Authentication
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?$query" : ''),
            $headers,
            $httpBody
        );
    }

    public function addPromoRules($store_id, $body)
    {
        return $this->addPromoRulesWithHttpInfo($store_id, $body);
    }

    public function addPromoRulesWithHttpInfo($store_id, $body)
    {
        $request = $this->addPromoRulesRequest($store_id, $body);

        try {
            $options = $this->createHttpClientOption();
            $response = $this->client->send($request, $options);

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return json_decode($response->getBody()->getContents());

        } catch (ApiException | GuzzleException $e) {
            throw $e->getResponseBody();
        }
    }

    protected function addPromoRulesRequest($store_id, $body): Request
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $store_id when calling '
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $body when calling '
            );
        }

        $resourcePath = '/ecommerce/stores/{store_id}/promo-rules';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // path params
        $resourcePath = str_replace(
            '{' . 'store_id' . '}',
            ObjectSerializer::toPathValue($store_id),
            $resourcePath
        );

        // body params
        $_tempBody = $body ?? null;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json'],
            ['application/json']
        );

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                if ($httpBody instanceof stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                if (is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        }


        // Basic Authentication
        if (!empty($this->config->getUsername()) && !empty($this->config->getPassword())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        // OAuth Authentication
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?$query" : ''),
            $headers,
            $httpBody
        );
    }

    public function setStoreCustomer($store_id, $customer_id, $body)
    {
        return $this->setStoreCustomerWithHttpInfo($store_id, $customer_id, $body);
    }

    public function setStoreCustomerWithHttpInfo($store_id, $customer_id, $body)
    {
        $request = $this->setStoreCustomerRequest($store_id, $customer_id, $body);

        try {
            $options = $this->createHttpClientOption();
            $response = $this->client->send($request, $options);

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return json_decode($response->getBody()->getContents());

        } catch (ApiException | GuzzleException $e) {
            throw $e->getResponseBody();
        }
    }

    protected function setStoreCustomerRequest($store_id, $customer_id, $body): Request
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $store_id when calling '
            );
        }
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null || (is_array($customer_id) && count($customer_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $customer_id when calling '
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $body when calling '
            );
        }

        $resourcePath = '/ecommerce/stores/{store_id}/customers/{customer_id}';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // path params
        $resourcePath = str_replace(
            '{' . 'store_id' . '}',
            ObjectSerializer::toPathValue($store_id),
            $resourcePath
        );
        // path params
        $resourcePath = str_replace(
            '{' . 'customer_id' . '}',
            ObjectSerializer::toPathValue($customer_id),
            $resourcePath
        );

        // body params
        $_tempBody = $body ?? null;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json'],
            ['application/json']
        );

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                if ($httpBody instanceof stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                if (is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        }


        // Basic Authentication
        if (!empty($this->config->getUsername()) && !empty($this->config->getPassword())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        // OAuth Authentication
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?$query" : ''),
            $headers,
            $httpBody
        );
    }

    public function addProductVariant($store_id, $product_id, $variant_id, $body)
    {
        return $this->addProductVariantWithHttpInfo($store_id, $product_id, $variant_id, $body);
    }

    public function addProductVariantWithHttpInfo($store_id, $product_id, $variant_id, $body)
    {
        $request = $this->addProductVariantRequest($store_id, $product_id, $variant_id, $body);

        try {
            $options = $this->createHttpClientOption();
            $response = $this->client->send($request, $options);

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return json_decode($response->getBody()->getContents());

        } catch (ApiException | GuzzleException $e) {
            throw $e->getResponseBody();
        }
    }

    protected function addProductVariantRequest($store_id, $product_id, $variant_id, $body): Request
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $store_id when calling '
            );
        }
        // verify the required parameter 'product_id' is set
        if ($product_id === null || (is_array($product_id) && count($product_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $product_id when calling '
            );
        }
        // verify the required parameter 'variant_id' is set
        if ($variant_id === null || (is_array($variant_id) && count($variant_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $variant_id when calling '
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $body when calling '
            );
        }

        $resourcePath = '/ecommerce/stores/{store_id}/products/{product_id}/variants/{variant_id}';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // path params
        $resourcePath = str_replace(
            '{' . 'store_id' . '}',
            ObjectSerializer::toPathValue($store_id),
            $resourcePath
        );
        // path params
        $resourcePath = str_replace(
            '{' . 'product_id' . '}',
            ObjectSerializer::toPathValue($product_id),
            $resourcePath
        );
        // path params
        $resourcePath = str_replace(
            '{' . 'variant_id' . '}',
            ObjectSerializer::toPathValue($variant_id),
            $resourcePath
        );

        // body params
        $_tempBody = $body ?? null;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json'],
            ['application/json']
        );

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                if ($httpBody instanceof stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                if (is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        }


        // Basic Authentication
        if (!empty($this->config->getUsername()) && !empty($this->config->getPassword())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        // OAuth Authentication
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?$query" : ''),
            $headers,
            $httpBody
        );
    }
}
