<?php

/**
 * VerifiedDomainsApi
 * PHP version 5
 *
 * @category Class
 * @package  MailchimpMarketing
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Mailchimp Marketing API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.74
 * Contact: apihelp@mailchimp.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.12
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace MailchimpMarketing\Api;

use GuzzleHttp\Exception\GuzzleException;
use GuzzleHttp\Psr7\Query;
use GuzzleHttp\Psr7\Request;
use InvalidArgumentException;
use MailchimpMarketing\ApiException;
use MailchimpMarketing\ApiTrait;
use MailchimpMarketing\ObjectSerializer;
use stdClass;

class VerifiedDomainsApi
{
    use ApiTrait;

    /**
     */
    public function createVerifiedDomain($body)
    {
        return $this->createVerifiedDomainWithHttpInfo($body);
    }

    /**
     */
    public function createVerifiedDomainWithHttpInfo($body)
    {
        $request = $this->createVerifiedDomainRequest($body);

        try {
            $options = $this->createHttpClientOption();
            $response = $this->client->send($request, $options);

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return json_decode($response->getBody()->getContents());

        } catch (ApiException | GuzzleException $e) {
            throw $e->getResponseBody();
        }
    }

    protected function createVerifiedDomainRequest($body): Request
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $body when calling '
            );
        }

        $resourcePath = '/verified-domains';
        $queryParams = [];
        $headerParams = [];


        // body params
        return $this->setBodyParams($body, $headerParams, $queryParams, $resourcePath);
    }

    public function deleteDomain($domain_name)
    {
        $this->deleteDomainWithHttpInfo($domain_name);
    }

    public function deleteDomainWithHttpInfo($domain_name)
    {
        $request = $this->deleteDomainRequest($domain_name);

        try {
            $options = $this->createHttpClientOption();
            $response = $this->client->send($request, $options);

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return json_decode($response->getBody()->getContents());

        } catch (ApiException | GuzzleException $e) {
            throw $e->getResponseBody();
        }
    }

    protected function deleteDomainRequest($domain_name): Request
    {
        // verify the required parameter 'domain_name' is set
        if ($domain_name === null || (is_array($domain_name) && count($domain_name) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $domain_name when calling '
            );
        }

        $resourcePath = '/verified-domains/{domain_name}';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // path params
        $resourcePath = str_replace(
            '{' . 'domain_name' . '}',
            ObjectSerializer::toPathValue($domain_name),
            $resourcePath
        );

        // body params
        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json'],
            ['application/json']
        );


        // Basic Authentication
        if (!empty($this->config->getUsername()) && !empty($this->config->getPassword())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        // OAuth Authentication
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?$query" : ''),
            $headers,
            $httpBody
        );
    }

    public function getDomain($domain_name)
    {
        return $this->getDomainWithHttpInfo($domain_name);
    }

    public function getDomainWithHttpInfo($domain_name)
    {
        $request = $this->getDomainRequest($domain_name);

        return $this->performRequest($request);
    }

    protected function getDomainRequest($domain_name): Request
    {
        // verify the required parameter 'domain_name' is set
        if ($domain_name === null || (is_array($domain_name) && count($domain_name) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $domain_name when calling '
            );
        }

        $resourcePath = '/verified-domains/{domain_name}';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        // path params
        $resourcePath = str_replace(
            '{' . 'domain_name' . '}',
            ObjectSerializer::toPathValue($domain_name),
            $resourcePath
        );

        // body params
        return $this->setBodyParams2($httpBody, $headerParams, $queryParams, $resourcePath);
    }

    public function getVerifiedDomainsAll()
    {
        return $this->getVerifiedDomainsAllWithHttpInfo();
    }

    public function getVerifiedDomainsAllWithHttpInfo()
    {
        $request = $this->getVerifiedDomainsAllRequest();

        return $this->performRequest($request);
    }

    protected function getVerifiedDomainsAllRequest(): Request
    {

        $resourcePath = '/verified-domains';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';


        // body params
        return $this->setBodyParams2($httpBody, $headerParams, $queryParams, $resourcePath);
    }

    public function submitDomainVerification($domain_name, $body)
    {
        return $this->submitDomainVerificationWithHttpInfo($domain_name, $body);
    }

    public function submitDomainVerificationWithHttpInfo($domain_name, $body)
    {
        $request = $this->submitDomainVerificationRequest($domain_name, $body);

        return $this->performRequest($request);
    }

    protected function submitDomainVerificationRequest($domain_name, $body): Request
    {
        // verify the required parameter 'domain_name' is set
        if ($domain_name === null || (is_array($domain_name) && count($domain_name) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $domain_name when calling '
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $body when calling '
            );
        }

        $resourcePath = '/verified-domains/{domain_name}/actions/verify';
        $queryParams = [];
        $headerParams = [];

        // path params
        $resourcePath = str_replace(
            '{' . 'domain_name' . '}',
            ObjectSerializer::toPathValue($domain_name),
            $resourcePath
        );

        // body params
        return $this->setBodyParams($body, $headerParams, $queryParams, $resourcePath);
    }

    /**
     * @param $body
     * @param array $headerParams
     * @param array $queryParams
     * @param $resourcePath
     * @return Request
     */
    protected function setBodyParams($body, array $headerParams, array $queryParams, $resourcePath): Request
    {
        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json'],
            ['application/json']
        );

        // for model (json/xml)
        $httpBody = $body;

        if ($headers['Content-Type'] === 'application/json') {
            if ($httpBody instanceof stdClass) {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            if (is_array($httpBody)) {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
            }
        }

        // Basic Authentication
        if (!empty($this->config->getUsername()) && !empty($this->config->getPassword())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        // OAuth Authentication
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?$query" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * @param Request $request
     * @return mixed
     */
    protected function performRequest(Request $request)
    {
        try {
            $options = $this->createHttpClientOption();
            $response = $this->client->send($request, $options);

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return json_decode($response->getBody()->getContents());

        } catch (ApiException | GuzzleException $e) {
            throw $e->getResponseBody();
        }
    }

    /**
     * @param $httpBody
     * @param array $headerParams
     * @param array $queryParams
     * @param string $resourcePath
     * @return Request
     */
    protected function setBodyParams2($httpBody, array $headerParams, array $queryParams, string $resourcePath): Request
    {
        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json'],
            ['application/json']
        );


        // Basic Authentication
        if (!empty($this->config->getUsername()) && !empty($this->config->getPassword())) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        // OAuth Authentication
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?$query" : ''),
            $headers,
            $httpBody
        );
    }
}
